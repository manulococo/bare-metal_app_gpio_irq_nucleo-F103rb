
bare-metal_app_gpio_irq_nucleo-F103rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08002f58  08002f58  00012f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003074  08003074  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003074  08003074  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003074  08003074  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003074  08003074  00013074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003078  08003078  00013078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800307c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000078  080030f4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  080030f4  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   000070b8  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000165a  00000000  00000000  0002719c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000670  00000000  00000000  000287f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004da  00000000  00000000  00028e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000175d3  00000000  00000000  00029342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008c18  00000000  00000000  00040915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082869  00000000  00000000  0004952d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024f4  00000000  00000000  000cbd98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000dd  00000000  00000000  000ce28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f40 	.word	0x08002f40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08002f40 	.word	0x08002f40

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000160:	f001 fd34 	bl	8001bcc <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 f9ec 	bl	8000540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f809 	bl	800017e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f872 	bl	8000254 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f846 	bl	8000200 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	/* Application Init */
	app_init();
 8000174:	f001 fa10 	bl	8001598 <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Application Update */
	  app_update();
 8000178:	f001 fa8c 	bl	8001694 <app_update>
 800017c:	e7fc      	b.n	8000178 <main+0x1c>

0800017e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017e:	b580      	push	{r7, lr}
 8000180:	b090      	sub	sp, #64	; 0x40
 8000182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000184:	f107 0318 	add.w	r3, r7, #24
 8000188:	2228      	movs	r2, #40	; 0x28
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f001 ffa2 	bl	80020d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a0:	2302      	movs	r3, #2
 80001a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a8:	2310      	movs	r3, #16
 80001aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ac:	2302      	movs	r3, #2
 80001ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b0:	2300      	movs	r3, #0
 80001b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 fcfc 	bl	8000bbc <HAL_RCC_OscConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001ca:	f000 f8b1 	bl	8000330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ce:	230f      	movs	r3, #15
 80001d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d2:	2302      	movs	r3, #2
 80001d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2102      	movs	r1, #2
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 ff69 	bl	80010c0 <HAL_RCC_ClockConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001f4:	f000 f89c 	bl	8000330 <Error_Handler>
  }
}
 80001f8:	bf00      	nop
 80001fa:	3740      	adds	r7, #64	; 0x40
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000204:	4b11      	ldr	r3, [pc, #68]	; (800024c <MX_USART2_UART_Init+0x4c>)
 8000206:	4a12      	ldr	r2, [pc, #72]	; (8000250 <MX_USART2_UART_Init+0x50>)
 8000208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800020a:	4b10      	ldr	r3, [pc, #64]	; (800024c <MX_USART2_UART_Init+0x4c>)
 800020c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000212:	4b0e      	ldr	r3, [pc, #56]	; (800024c <MX_USART2_UART_Init+0x4c>)
 8000214:	2200      	movs	r2, #0
 8000216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000218:	4b0c      	ldr	r3, [pc, #48]	; (800024c <MX_USART2_UART_Init+0x4c>)
 800021a:	2200      	movs	r2, #0
 800021c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800021e:	4b0b      	ldr	r3, [pc, #44]	; (800024c <MX_USART2_UART_Init+0x4c>)
 8000220:	2200      	movs	r2, #0
 8000222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <MX_USART2_UART_Init+0x4c>)
 8000226:	220c      	movs	r2, #12
 8000228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800022a:	4b08      	ldr	r3, [pc, #32]	; (800024c <MX_USART2_UART_Init+0x4c>)
 800022c:	2200      	movs	r2, #0
 800022e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <MX_USART2_UART_Init+0x4c>)
 8000232:	2200      	movs	r2, #0
 8000234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000236:	4805      	ldr	r0, [pc, #20]	; (800024c <MX_USART2_UART_Init+0x4c>)
 8000238:	f001 f8d0 	bl	80013dc <HAL_UART_Init>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000242:	f000 f875 	bl	8000330 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	20000094 	.word	0x20000094
 8000250:	40004400 	.word	0x40004400

08000254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025a:	f107 0310 	add.w	r3, r7, #16
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000268:	4b2d      	ldr	r3, [pc, #180]	; (8000320 <MX_GPIO_Init+0xcc>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a2c      	ldr	r2, [pc, #176]	; (8000320 <MX_GPIO_Init+0xcc>)
 800026e:	f043 0310 	orr.w	r3, r3, #16
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b2a      	ldr	r3, [pc, #168]	; (8000320 <MX_GPIO_Init+0xcc>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0310 	and.w	r3, r3, #16
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000280:	4b27      	ldr	r3, [pc, #156]	; (8000320 <MX_GPIO_Init+0xcc>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a26      	ldr	r2, [pc, #152]	; (8000320 <MX_GPIO_Init+0xcc>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6193      	str	r3, [r2, #24]
 800028c:	4b24      	ldr	r3, [pc, #144]	; (8000320 <MX_GPIO_Init+0xcc>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f003 0320 	and.w	r3, r3, #32
 8000294:	60bb      	str	r3, [r7, #8]
 8000296:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000298:	4b21      	ldr	r3, [pc, #132]	; (8000320 <MX_GPIO_Init+0xcc>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a20      	ldr	r2, [pc, #128]	; (8000320 <MX_GPIO_Init+0xcc>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	6193      	str	r3, [r2, #24]
 80002a4:	4b1e      	ldr	r3, [pc, #120]	; (8000320 <MX_GPIO_Init+0xcc>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f003 0304 	and.w	r3, r3, #4
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b0:	4b1b      	ldr	r3, [pc, #108]	; (8000320 <MX_GPIO_Init+0xcc>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a1a      	ldr	r2, [pc, #104]	; (8000320 <MX_GPIO_Init+0xcc>)
 80002b6:	f043 0308 	orr.w	r3, r3, #8
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b18      	ldr	r3, [pc, #96]	; (8000320 <MX_GPIO_Init+0xcc>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0308 	and.w	r3, r3, #8
 80002c4:	603b      	str	r3, [r7, #0]
 80002c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2120      	movs	r1, #32
 80002cc:	4815      	ldr	r0, [pc, #84]	; (8000324 <MX_GPIO_Init+0xd0>)
 80002ce:	f000 fc2b 	bl	8000b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002d8:	4b13      	ldr	r3, [pc, #76]	; (8000328 <MX_GPIO_Init+0xd4>)
 80002da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002dc:	2300      	movs	r3, #0
 80002de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002e0:	f107 0310 	add.w	r3, r7, #16
 80002e4:	4619      	mov	r1, r3
 80002e6:	4811      	ldr	r0, [pc, #68]	; (800032c <MX_GPIO_Init+0xd8>)
 80002e8:	f000 fa9a 	bl	8000820 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002ec:	2320      	movs	r3, #32
 80002ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f0:	2301      	movs	r3, #1
 80002f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f4:	2300      	movs	r3, #0
 80002f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f8:	2302      	movs	r3, #2
 80002fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002fc:	f107 0310 	add.w	r3, r7, #16
 8000300:	4619      	mov	r1, r3
 8000302:	4808      	ldr	r0, [pc, #32]	; (8000324 <MX_GPIO_Init+0xd0>)
 8000304:	f000 fa8c 	bl	8000820 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000308:	2200      	movs	r2, #0
 800030a:	2100      	movs	r1, #0
 800030c:	2028      	movs	r0, #40	; 0x28
 800030e:	f000 fa50 	bl	80007b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000312:	2028      	movs	r0, #40	; 0x28
 8000314:	f000 fa69 	bl	80007ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000318:	bf00      	nop
 800031a:	3720      	adds	r7, #32
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	40021000 	.word	0x40021000
 8000324:	40010800 	.word	0x40010800
 8000328:	10110000 	.word	0x10110000
 800032c:	40011000 	.word	0x40011000

08000330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000334:	b672      	cpsid	i
}
 8000336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000338:	e7fe      	b.n	8000338 <Error_Handler+0x8>
	...

0800033c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000342:	4b15      	ldr	r3, [pc, #84]	; (8000398 <HAL_MspInit+0x5c>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a14      	ldr	r2, [pc, #80]	; (8000398 <HAL_MspInit+0x5c>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6193      	str	r3, [r2, #24]
 800034e:	4b12      	ldr	r3, [pc, #72]	; (8000398 <HAL_MspInit+0x5c>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	60bb      	str	r3, [r7, #8]
 8000358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800035a:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <HAL_MspInit+0x5c>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <HAL_MspInit+0x5c>)
 8000360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000364:	61d3      	str	r3, [r2, #28]
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <HAL_MspInit+0x5c>)
 8000368:	69db      	ldr	r3, [r3, #28]
 800036a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000372:	4b0a      	ldr	r3, [pc, #40]	; (800039c <HAL_MspInit+0x60>)
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	4a04      	ldr	r2, [pc, #16]	; (800039c <HAL_MspInit+0x60>)
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	40021000 	.word	0x40021000
 800039c:	40010000 	.word	0x40010000

080003a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b088      	sub	sp, #32
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a8:	f107 0310 	add.w	r3, r7, #16
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a15      	ldr	r2, [pc, #84]	; (8000410 <HAL_UART_MspInit+0x70>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d123      	bne.n	8000408 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <HAL_UART_MspInit+0x74>)
 80003c2:	69db      	ldr	r3, [r3, #28]
 80003c4:	4a13      	ldr	r2, [pc, #76]	; (8000414 <HAL_UART_MspInit+0x74>)
 80003c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ca:	61d3      	str	r3, [r2, #28]
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <HAL_UART_MspInit+0x74>)
 80003ce:	69db      	ldr	r3, [r3, #28]
 80003d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d8:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <HAL_UART_MspInit+0x74>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a0d      	ldr	r2, [pc, #52]	; (8000414 <HAL_UART_MspInit+0x74>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <HAL_UART_MspInit+0x74>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0304 	and.w	r3, r3, #4
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003f0:	230c      	movs	r3, #12
 80003f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003f4:	2302      	movs	r3, #2
 80003f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f8:	2302      	movs	r3, #2
 80003fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fc:	f107 0310 	add.w	r3, r7, #16
 8000400:	4619      	mov	r1, r3
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <HAL_UART_MspInit+0x78>)
 8000404:	f000 fa0c 	bl	8000820 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000408:	bf00      	nop
 800040a:	3720      	adds	r7, #32
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40004400 	.word	0x40004400
 8000414:	40021000 	.word	0x40021000
 8000418:	40010800 	.word	0x40010800

0800041c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000420:	e7fe      	b.n	8000420 <NMI_Handler+0x4>

08000422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000426:	e7fe      	b.n	8000426 <HardFault_Handler+0x4>

08000428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800042c:	e7fe      	b.n	800042c <MemManage_Handler+0x4>

0800042e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <BusFault_Handler+0x4>

08000434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <UsageFault_Handler+0x4>

0800043a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr

08000446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr

08000452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr

0800045e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000462:	f000 f8b3 	bl	80005cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}

0800046a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800046e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000472:	f000 fb8b 	bl	8000b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000484:	4a14      	ldr	r2, [pc, #80]	; (80004d8 <_sbrk+0x5c>)
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <_sbrk+0x60>)
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000490:	4b13      	ldr	r3, [pc, #76]	; (80004e0 <_sbrk+0x64>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d102      	bne.n	800049e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000498:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <_sbrk+0x64>)
 800049a:	4a12      	ldr	r2, [pc, #72]	; (80004e4 <_sbrk+0x68>)
 800049c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800049e:	4b10      	ldr	r3, [pc, #64]	; (80004e0 <_sbrk+0x64>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4413      	add	r3, r2
 80004a6:	693a      	ldr	r2, [r7, #16]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d207      	bcs.n	80004bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004ac:	f001 fe62 	bl	8002174 <__errno>
 80004b0:	4603      	mov	r3, r0
 80004b2:	220c      	movs	r2, #12
 80004b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004b6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ba:	e009      	b.n	80004d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004bc:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <_sbrk+0x64>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004c2:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <_sbrk+0x64>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4413      	add	r3, r2
 80004ca:	4a05      	ldr	r2, [pc, #20]	; (80004e0 <_sbrk+0x64>)
 80004cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ce:	68fb      	ldr	r3, [r7, #12]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20005000 	.word	0x20005000
 80004dc:	00000400 	.word	0x00000400
 80004e0:	200000dc 	.word	0x200000dc
 80004e4:	20000328 	.word	0x20000328

080004e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004f4:	f7ff fff8 	bl	80004e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f8:	480b      	ldr	r0, [pc, #44]	; (8000528 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004fa:	490c      	ldr	r1, [pc, #48]	; (800052c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004fc:	4a0c      	ldr	r2, [pc, #48]	; (8000530 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000500:	e002      	b.n	8000508 <LoopCopyDataInit>

08000502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000506:	3304      	adds	r3, #4

08000508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800050c:	d3f9      	bcc.n	8000502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050e:	4a09      	ldr	r2, [pc, #36]	; (8000534 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000510:	4c09      	ldr	r4, [pc, #36]	; (8000538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000514:	e001      	b.n	800051a <LoopFillZerobss>

08000516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000518:	3204      	adds	r2, #4

0800051a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800051c:	d3fb      	bcc.n	8000516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800051e:	f001 fe2f 	bl	8002180 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000522:	f7ff fe1b 	bl	800015c <main>
  bx lr
 8000526:	4770      	bx	lr
  ldr r0, =_sdata
 8000528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800052c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000530:	0800307c 	.word	0x0800307c
  ldr r2, =_sbss
 8000534:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000538:	20000324 	.word	0x20000324

0800053c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800053c:	e7fe      	b.n	800053c <ADC1_2_IRQHandler>
	...

08000540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <HAL_Init+0x28>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <HAL_Init+0x28>)
 800054a:	f043 0310 	orr.w	r3, r3, #16
 800054e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000550:	2003      	movs	r0, #3
 8000552:	f000 f923 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000556:	2000      	movs	r0, #0
 8000558:	f000 f808 	bl	800056c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800055c:	f7ff feee 	bl	800033c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000560:	2300      	movs	r3, #0
}
 8000562:	4618      	mov	r0, r3
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40022000 	.word	0x40022000

0800056c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_InitTick+0x54>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <HAL_InitTick+0x58>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	4619      	mov	r1, r3
 800057e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000582:	fbb3 f3f1 	udiv	r3, r3, r1
 8000586:	fbb2 f3f3 	udiv	r3, r2, r3
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f93b 	bl	8000806 <HAL_SYSTICK_Config>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000596:	2301      	movs	r3, #1
 8000598:	e00e      	b.n	80005b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b0f      	cmp	r3, #15
 800059e:	d80a      	bhi.n	80005b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a0:	2200      	movs	r2, #0
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	f04f 30ff 	mov.w	r0, #4294967295
 80005a8:	f000 f903 	bl	80007b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005ac:	4a06      	ldr	r2, [pc, #24]	; (80005c8 <HAL_InitTick+0x5c>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005b2:	2300      	movs	r3, #0
 80005b4:	e000      	b.n	80005b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000008 	.word	0x20000008
 80005c8:	20000004 	.word	0x20000004

080005cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <HAL_IncTick+0x1c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b05      	ldr	r3, [pc, #20]	; (80005ec <HAL_IncTick+0x20>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a03      	ldr	r2, [pc, #12]	; (80005ec <HAL_IncTick+0x20>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	20000008 	.word	0x20000008
 80005ec:	200000e0 	.word	0x200000e0

080005f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return uwTick;
 80005f4:	4b02      	ldr	r3, [pc, #8]	; (8000600 <HAL_GetTick+0x10>)
 80005f6:	681b      	ldr	r3, [r3, #0]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	200000e0 	.word	0x200000e0

08000604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800062c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000636:	4a04      	ldr	r2, [pc, #16]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	60d3      	str	r3, [r2, #12]
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <__NVIC_GetPriorityGrouping+0x18>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	f003 0307 	and.w	r3, r3, #7
}
 800065a:	4618      	mov	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	2b00      	cmp	r3, #0
 8000678:	db0b      	blt.n	8000692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	f003 021f 	and.w	r2, r3, #31
 8000680:	4906      	ldr	r1, [pc, #24]	; (800069c <__NVIC_EnableIRQ+0x34>)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	095b      	lsrs	r3, r3, #5
 8000688:	2001      	movs	r0, #1
 800068a:	fa00 f202 	lsl.w	r2, r0, r2
 800068e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	e000e100 	.word	0xe000e100

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db0a      	blt.n	80006ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	490c      	ldr	r1, [pc, #48]	; (80006ec <__NVIC_SetPriority+0x4c>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c8:	e00a      	b.n	80006e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4908      	ldr	r1, [pc, #32]	; (80006f0 <__NVIC_SetPriority+0x50>)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	3b04      	subs	r3, #4
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	440b      	add	r3, r1
 80006de:	761a      	strb	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	f04f 32ff 	mov.w	r2, #4294967295
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	43da      	mvns	r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	401a      	ands	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073c:	f04f 31ff 	mov.w	r1, #4294967295
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	43d9      	mvns	r1, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	4313      	orrs	r3, r2
         );
}
 800074e:	4618      	mov	r0, r3
 8000750:	3724      	adds	r7, #36	; 0x24
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000768:	d301      	bcc.n	800076e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076a:	2301      	movs	r3, #1
 800076c:	e00f      	b.n	800078e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <SysTick_Config+0x40>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000776:	210f      	movs	r1, #15
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f7ff ff90 	bl	80006a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SysTick_Config+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SysTick_Config+0x40>)
 8000788:	2207      	movs	r2, #7
 800078a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	e000e010 	.word	0xe000e010

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff2d 	bl	8000604 <__NVIC_SetPriorityGrouping>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c4:	f7ff ff42 	bl	800064c <__NVIC_GetPriorityGrouping>
 80007c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f7ff ff90 	bl	80006f4 <NVIC_EncodePriority>
 80007d4:	4602      	mov	r2, r0
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff5f 	bl	80006a0 <__NVIC_SetPriority>
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff35 	bl	8000668 <__NVIC_EnableIRQ>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ffa2 	bl	8000758 <SysTick_Config>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000820:	b480      	push	{r7}
 8000822:	b08b      	sub	sp, #44	; 0x2c
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000832:	e169      	b.n	8000b08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000834:	2201      	movs	r2, #1
 8000836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	69fa      	ldr	r2, [r7, #28]
 8000844:	4013      	ands	r3, r2
 8000846:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000848:	69ba      	ldr	r2, [r7, #24]
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	429a      	cmp	r2, r3
 800084e:	f040 8158 	bne.w	8000b02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	4a9a      	ldr	r2, [pc, #616]	; (8000ac0 <HAL_GPIO_Init+0x2a0>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d05e      	beq.n	800091a <HAL_GPIO_Init+0xfa>
 800085c:	4a98      	ldr	r2, [pc, #608]	; (8000ac0 <HAL_GPIO_Init+0x2a0>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d875      	bhi.n	800094e <HAL_GPIO_Init+0x12e>
 8000862:	4a98      	ldr	r2, [pc, #608]	; (8000ac4 <HAL_GPIO_Init+0x2a4>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d058      	beq.n	800091a <HAL_GPIO_Init+0xfa>
 8000868:	4a96      	ldr	r2, [pc, #600]	; (8000ac4 <HAL_GPIO_Init+0x2a4>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d86f      	bhi.n	800094e <HAL_GPIO_Init+0x12e>
 800086e:	4a96      	ldr	r2, [pc, #600]	; (8000ac8 <HAL_GPIO_Init+0x2a8>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d052      	beq.n	800091a <HAL_GPIO_Init+0xfa>
 8000874:	4a94      	ldr	r2, [pc, #592]	; (8000ac8 <HAL_GPIO_Init+0x2a8>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d869      	bhi.n	800094e <HAL_GPIO_Init+0x12e>
 800087a:	4a94      	ldr	r2, [pc, #592]	; (8000acc <HAL_GPIO_Init+0x2ac>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d04c      	beq.n	800091a <HAL_GPIO_Init+0xfa>
 8000880:	4a92      	ldr	r2, [pc, #584]	; (8000acc <HAL_GPIO_Init+0x2ac>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d863      	bhi.n	800094e <HAL_GPIO_Init+0x12e>
 8000886:	4a92      	ldr	r2, [pc, #584]	; (8000ad0 <HAL_GPIO_Init+0x2b0>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d046      	beq.n	800091a <HAL_GPIO_Init+0xfa>
 800088c:	4a90      	ldr	r2, [pc, #576]	; (8000ad0 <HAL_GPIO_Init+0x2b0>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d85d      	bhi.n	800094e <HAL_GPIO_Init+0x12e>
 8000892:	2b12      	cmp	r3, #18
 8000894:	d82a      	bhi.n	80008ec <HAL_GPIO_Init+0xcc>
 8000896:	2b12      	cmp	r3, #18
 8000898:	d859      	bhi.n	800094e <HAL_GPIO_Init+0x12e>
 800089a:	a201      	add	r2, pc, #4	; (adr r2, 80008a0 <HAL_GPIO_Init+0x80>)
 800089c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a0:	0800091b 	.word	0x0800091b
 80008a4:	080008f5 	.word	0x080008f5
 80008a8:	08000907 	.word	0x08000907
 80008ac:	08000949 	.word	0x08000949
 80008b0:	0800094f 	.word	0x0800094f
 80008b4:	0800094f 	.word	0x0800094f
 80008b8:	0800094f 	.word	0x0800094f
 80008bc:	0800094f 	.word	0x0800094f
 80008c0:	0800094f 	.word	0x0800094f
 80008c4:	0800094f 	.word	0x0800094f
 80008c8:	0800094f 	.word	0x0800094f
 80008cc:	0800094f 	.word	0x0800094f
 80008d0:	0800094f 	.word	0x0800094f
 80008d4:	0800094f 	.word	0x0800094f
 80008d8:	0800094f 	.word	0x0800094f
 80008dc:	0800094f 	.word	0x0800094f
 80008e0:	0800094f 	.word	0x0800094f
 80008e4:	080008fd 	.word	0x080008fd
 80008e8:	08000911 	.word	0x08000911
 80008ec:	4a79      	ldr	r2, [pc, #484]	; (8000ad4 <HAL_GPIO_Init+0x2b4>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d013      	beq.n	800091a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008f2:	e02c      	b.n	800094e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	623b      	str	r3, [r7, #32]
          break;
 80008fa:	e029      	b.n	8000950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	3304      	adds	r3, #4
 8000902:	623b      	str	r3, [r7, #32]
          break;
 8000904:	e024      	b.n	8000950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	3308      	adds	r3, #8
 800090c:	623b      	str	r3, [r7, #32]
          break;
 800090e:	e01f      	b.n	8000950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	330c      	adds	r3, #12
 8000916:	623b      	str	r3, [r7, #32]
          break;
 8000918:	e01a      	b.n	8000950 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d102      	bne.n	8000928 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000922:	2304      	movs	r3, #4
 8000924:	623b      	str	r3, [r7, #32]
          break;
 8000926:	e013      	b.n	8000950 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d105      	bne.n	800093c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000930:	2308      	movs	r3, #8
 8000932:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	69fa      	ldr	r2, [r7, #28]
 8000938:	611a      	str	r2, [r3, #16]
          break;
 800093a:	e009      	b.n	8000950 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800093c:	2308      	movs	r3, #8
 800093e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	69fa      	ldr	r2, [r7, #28]
 8000944:	615a      	str	r2, [r3, #20]
          break;
 8000946:	e003      	b.n	8000950 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
          break;
 800094c:	e000      	b.n	8000950 <HAL_GPIO_Init+0x130>
          break;
 800094e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	2bff      	cmp	r3, #255	; 0xff
 8000954:	d801      	bhi.n	800095a <HAL_GPIO_Init+0x13a>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	e001      	b.n	800095e <HAL_GPIO_Init+0x13e>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3304      	adds	r3, #4
 800095e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	2bff      	cmp	r3, #255	; 0xff
 8000964:	d802      	bhi.n	800096c <HAL_GPIO_Init+0x14c>
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	e002      	b.n	8000972 <HAL_GPIO_Init+0x152>
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	3b08      	subs	r3, #8
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	210f      	movs	r1, #15
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	fa01 f303 	lsl.w	r3, r1, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	401a      	ands	r2, r3
 8000984:	6a39      	ldr	r1, [r7, #32]
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	fa01 f303 	lsl.w	r3, r1, r3
 800098c:	431a      	orrs	r2, r3
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	2b00      	cmp	r3, #0
 800099c:	f000 80b1 	beq.w	8000b02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009a0:	4b4d      	ldr	r3, [pc, #308]	; (8000ad8 <HAL_GPIO_Init+0x2b8>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a4c      	ldr	r2, [pc, #304]	; (8000ad8 <HAL_GPIO_Init+0x2b8>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b4a      	ldr	r3, [pc, #296]	; (8000ad8 <HAL_GPIO_Init+0x2b8>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009b8:	4a48      	ldr	r2, [pc, #288]	; (8000adc <HAL_GPIO_Init+0x2bc>)
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	089b      	lsrs	r3, r3, #2
 80009be:	3302      	adds	r3, #2
 80009c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c8:	f003 0303 	and.w	r3, r3, #3
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	220f      	movs	r2, #15
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	43db      	mvns	r3, r3
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	4013      	ands	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a40      	ldr	r2, [pc, #256]	; (8000ae0 <HAL_GPIO_Init+0x2c0>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d013      	beq.n	8000a0c <HAL_GPIO_Init+0x1ec>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a3f      	ldr	r2, [pc, #252]	; (8000ae4 <HAL_GPIO_Init+0x2c4>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d00d      	beq.n	8000a08 <HAL_GPIO_Init+0x1e8>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a3e      	ldr	r2, [pc, #248]	; (8000ae8 <HAL_GPIO_Init+0x2c8>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d007      	beq.n	8000a04 <HAL_GPIO_Init+0x1e4>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a3d      	ldr	r2, [pc, #244]	; (8000aec <HAL_GPIO_Init+0x2cc>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d101      	bne.n	8000a00 <HAL_GPIO_Init+0x1e0>
 80009fc:	2303      	movs	r3, #3
 80009fe:	e006      	b.n	8000a0e <HAL_GPIO_Init+0x1ee>
 8000a00:	2304      	movs	r3, #4
 8000a02:	e004      	b.n	8000a0e <HAL_GPIO_Init+0x1ee>
 8000a04:	2302      	movs	r3, #2
 8000a06:	e002      	b.n	8000a0e <HAL_GPIO_Init+0x1ee>
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e000      	b.n	8000a0e <HAL_GPIO_Init+0x1ee>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a10:	f002 0203 	and.w	r2, r2, #3
 8000a14:	0092      	lsls	r2, r2, #2
 8000a16:	4093      	lsls	r3, r2
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a1e:	492f      	ldr	r1, [pc, #188]	; (8000adc <HAL_GPIO_Init+0x2bc>)
 8000a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a22:	089b      	lsrs	r3, r3, #2
 8000a24:	3302      	adds	r3, #2
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d006      	beq.n	8000a46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a38:	4b2d      	ldr	r3, [pc, #180]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a3a:	689a      	ldr	r2, [r3, #8]
 8000a3c:	492c      	ldr	r1, [pc, #176]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	608b      	str	r3, [r1, #8]
 8000a44:	e006      	b.n	8000a54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a46:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a48:	689a      	ldr	r2, [r3, #8]
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	4928      	ldr	r1, [pc, #160]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a50:	4013      	ands	r3, r2
 8000a52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d006      	beq.n	8000a6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a60:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a62:	68da      	ldr	r2, [r3, #12]
 8000a64:	4922      	ldr	r1, [pc, #136]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	60cb      	str	r3, [r1, #12]
 8000a6c:	e006      	b.n	8000a7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a6e:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a70:	68da      	ldr	r2, [r3, #12]
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	43db      	mvns	r3, r3
 8000a76:	491e      	ldr	r1, [pc, #120]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d006      	beq.n	8000a96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a8a:	685a      	ldr	r2, [r3, #4]
 8000a8c:	4918      	ldr	r1, [pc, #96]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	604b      	str	r3, [r1, #4]
 8000a94:	e006      	b.n	8000aa4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a98:	685a      	ldr	r2, [r3, #4]
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	4914      	ldr	r1, [pc, #80]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d021      	beq.n	8000af4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	490e      	ldr	r1, [pc, #56]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	600b      	str	r3, [r1, #0]
 8000abc:	e021      	b.n	8000b02 <HAL_GPIO_Init+0x2e2>
 8000abe:	bf00      	nop
 8000ac0:	10320000 	.word	0x10320000
 8000ac4:	10310000 	.word	0x10310000
 8000ac8:	10220000 	.word	0x10220000
 8000acc:	10210000 	.word	0x10210000
 8000ad0:	10120000 	.word	0x10120000
 8000ad4:	10110000 	.word	0x10110000
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010000 	.word	0x40010000
 8000ae0:	40010800 	.word	0x40010800
 8000ae4:	40010c00 	.word	0x40010c00
 8000ae8:	40011000 	.word	0x40011000
 8000aec:	40011400 	.word	0x40011400
 8000af0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_GPIO_Init+0x304>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	4909      	ldr	r1, [pc, #36]	; (8000b24 <HAL_GPIO_Init+0x304>)
 8000afe:	4013      	ands	r3, r2
 8000b00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	3301      	adds	r3, #1
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f47f ae8e 	bne.w	8000834 <HAL_GPIO_Init+0x14>
  }
}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	372c      	adds	r7, #44	; 0x2c
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	40010400 	.word	0x40010400

08000b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	807b      	strh	r3, [r7, #2]
 8000b34:	4613      	mov	r3, r2
 8000b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b38:	787b      	ldrb	r3, [r7, #1]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d003      	beq.n	8000b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b3e:	887a      	ldrh	r2, [r7, #2]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b44:	e003      	b.n	8000b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b46:	887b      	ldrh	r3, [r7, #2]
 8000b48:	041a      	lsls	r2, r3, #16
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	611a      	str	r2, [r3, #16]
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b6a:	887a      	ldrh	r2, [r7, #2]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	041a      	lsls	r2, r3, #16
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	43d9      	mvns	r1, r3
 8000b76:	887b      	ldrh	r3, [r7, #2]
 8000b78:	400b      	ands	r3, r1
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	611a      	str	r2, [r3, #16]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
	...

08000b8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b98:	695a      	ldr	r2, [r3, #20]
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d006      	beq.n	8000bb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fdc6 	bl	800173c <HAL_GPIO_EXTI_Callback>
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40010400 	.word	0x40010400

08000bbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e272      	b.n	80010b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 8087 	beq.w	8000cea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bdc:	4b92      	ldr	r3, [pc, #584]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f003 030c 	and.w	r3, r3, #12
 8000be4:	2b04      	cmp	r3, #4
 8000be6:	d00c      	beq.n	8000c02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000be8:	4b8f      	ldr	r3, [pc, #572]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 030c 	and.w	r3, r3, #12
 8000bf0:	2b08      	cmp	r3, #8
 8000bf2:	d112      	bne.n	8000c1a <HAL_RCC_OscConfig+0x5e>
 8000bf4:	4b8c      	ldr	r3, [pc, #560]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c00:	d10b      	bne.n	8000c1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c02:	4b89      	ldr	r3, [pc, #548]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d06c      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x12c>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d168      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e24c      	b.n	80010b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c22:	d106      	bne.n	8000c32 <HAL_RCC_OscConfig+0x76>
 8000c24:	4b80      	ldr	r3, [pc, #512]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a7f      	ldr	r2, [pc, #508]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	e02e      	b.n	8000c90 <HAL_RCC_OscConfig+0xd4>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d10c      	bne.n	8000c54 <HAL_RCC_OscConfig+0x98>
 8000c3a:	4b7b      	ldr	r3, [pc, #492]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a7a      	ldr	r2, [pc, #488]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	4b78      	ldr	r3, [pc, #480]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a77      	ldr	r2, [pc, #476]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	e01d      	b.n	8000c90 <HAL_RCC_OscConfig+0xd4>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c5c:	d10c      	bne.n	8000c78 <HAL_RCC_OscConfig+0xbc>
 8000c5e:	4b72      	ldr	r3, [pc, #456]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a71      	ldr	r2, [pc, #452]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	4b6f      	ldr	r3, [pc, #444]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a6e      	ldr	r2, [pc, #440]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	e00b      	b.n	8000c90 <HAL_RCC_OscConfig+0xd4>
 8000c78:	4b6b      	ldr	r3, [pc, #428]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a6a      	ldr	r2, [pc, #424]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	4b68      	ldr	r3, [pc, #416]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a67      	ldr	r2, [pc, #412]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d013      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c98:	f7ff fcaa 	bl	80005f0 <HAL_GetTick>
 8000c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9e:	e008      	b.n	8000cb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca0:	f7ff fca6 	bl	80005f0 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b64      	cmp	r3, #100	; 0x64
 8000cac:	d901      	bls.n	8000cb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e200      	b.n	80010b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb2:	4b5d      	ldr	r3, [pc, #372]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f0      	beq.n	8000ca0 <HAL_RCC_OscConfig+0xe4>
 8000cbe:	e014      	b.n	8000cea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc0:	f7ff fc96 	bl	80005f0 <HAL_GetTick>
 8000cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc6:	e008      	b.n	8000cda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc8:	f7ff fc92 	bl	80005f0 <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	2b64      	cmp	r3, #100	; 0x64
 8000cd4:	d901      	bls.n	8000cda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e1ec      	b.n	80010b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cda:	4b53      	ldr	r3, [pc, #332]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f0      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x10c>
 8000ce6:	e000      	b.n	8000cea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d063      	beq.n	8000dbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cf6:	4b4c      	ldr	r3, [pc, #304]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 030c 	and.w	r3, r3, #12
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d00b      	beq.n	8000d1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d02:	4b49      	ldr	r3, [pc, #292]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 030c 	and.w	r3, r3, #12
 8000d0a:	2b08      	cmp	r3, #8
 8000d0c:	d11c      	bne.n	8000d48 <HAL_RCC_OscConfig+0x18c>
 8000d0e:	4b46      	ldr	r3, [pc, #280]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d116      	bne.n	8000d48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1a:	4b43      	ldr	r3, [pc, #268]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d005      	beq.n	8000d32 <HAL_RCC_OscConfig+0x176>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d001      	beq.n	8000d32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e1c0      	b.n	80010b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d32:	4b3d      	ldr	r3, [pc, #244]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	4939      	ldr	r1, [pc, #228]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	4313      	orrs	r3, r2
 8000d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d46:	e03a      	b.n	8000dbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d020      	beq.n	8000d92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d50:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <HAL_RCC_OscConfig+0x270>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d56:	f7ff fc4b 	bl	80005f0 <HAL_GetTick>
 8000d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d5c:	e008      	b.n	8000d70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d5e:	f7ff fc47 	bl	80005f0 <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d901      	bls.n	8000d70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e1a1      	b.n	80010b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d70:	4b2d      	ldr	r3, [pc, #180]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d0f0      	beq.n	8000d5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	4927      	ldr	r1, [pc, #156]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	600b      	str	r3, [r1, #0]
 8000d90:	e015      	b.n	8000dbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d92:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <HAL_RCC_OscConfig+0x270>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d98:	f7ff fc2a 	bl	80005f0 <HAL_GetTick>
 8000d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9e:	e008      	b.n	8000db2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000da0:	f7ff fc26 	bl	80005f0 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e180      	b.n	80010b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db2:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f0      	bne.n	8000da0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0308 	and.w	r3, r3, #8
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d03a      	beq.n	8000e40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d019      	beq.n	8000e06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_RCC_OscConfig+0x274>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd8:	f7ff fc0a 	bl	80005f0 <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de0:	f7ff fc06 	bl	80005f0 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e160      	b.n	80010b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0f0      	beq.n	8000de0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f000 face 	bl	80013a0 <RCC_Delay>
 8000e04:	e01c      	b.n	8000e40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_RCC_OscConfig+0x274>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e0c:	f7ff fbf0 	bl	80005f0 <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e12:	e00f      	b.n	8000e34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e14:	f7ff fbec 	bl	80005f0 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d908      	bls.n	8000e34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e146      	b.n	80010b4 <HAL_RCC_OscConfig+0x4f8>
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	42420000 	.word	0x42420000
 8000e30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e34:	4b92      	ldr	r3, [pc, #584]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1e9      	bne.n	8000e14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f000 80a6 	beq.w	8000f9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e52:	4b8b      	ldr	r3, [pc, #556]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10d      	bne.n	8000e7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	4b88      	ldr	r3, [pc, #544]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	4a87      	ldr	r2, [pc, #540]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	61d3      	str	r3, [r2, #28]
 8000e6a:	4b85      	ldr	r3, [pc, #532]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e76:	2301      	movs	r3, #1
 8000e78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e7a:	4b82      	ldr	r3, [pc, #520]	; (8001084 <HAL_RCC_OscConfig+0x4c8>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d118      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e86:	4b7f      	ldr	r3, [pc, #508]	; (8001084 <HAL_RCC_OscConfig+0x4c8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a7e      	ldr	r2, [pc, #504]	; (8001084 <HAL_RCC_OscConfig+0x4c8>)
 8000e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e92:	f7ff fbad 	bl	80005f0 <HAL_GetTick>
 8000e96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e98:	e008      	b.n	8000eac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e9a:	f7ff fba9 	bl	80005f0 <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b64      	cmp	r3, #100	; 0x64
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e103      	b.n	80010b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eac:	4b75      	ldr	r3, [pc, #468]	; (8001084 <HAL_RCC_OscConfig+0x4c8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0f0      	beq.n	8000e9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d106      	bne.n	8000ece <HAL_RCC_OscConfig+0x312>
 8000ec0:	4b6f      	ldr	r3, [pc, #444]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	4a6e      	ldr	r2, [pc, #440]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6213      	str	r3, [r2, #32]
 8000ecc:	e02d      	b.n	8000f2a <HAL_RCC_OscConfig+0x36e>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10c      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x334>
 8000ed6:	4b6a      	ldr	r3, [pc, #424]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000ed8:	6a1b      	ldr	r3, [r3, #32]
 8000eda:	4a69      	ldr	r2, [pc, #420]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	f023 0301 	bic.w	r3, r3, #1
 8000ee0:	6213      	str	r3, [r2, #32]
 8000ee2:	4b67      	ldr	r3, [pc, #412]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	4a66      	ldr	r2, [pc, #408]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000ee8:	f023 0304 	bic.w	r3, r3, #4
 8000eec:	6213      	str	r3, [r2, #32]
 8000eee:	e01c      	b.n	8000f2a <HAL_RCC_OscConfig+0x36e>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	2b05      	cmp	r3, #5
 8000ef6:	d10c      	bne.n	8000f12 <HAL_RCC_OscConfig+0x356>
 8000ef8:	4b61      	ldr	r3, [pc, #388]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	4a60      	ldr	r2, [pc, #384]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	6213      	str	r3, [r2, #32]
 8000f04:	4b5e      	ldr	r3, [pc, #376]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	4a5d      	ldr	r2, [pc, #372]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	6213      	str	r3, [r2, #32]
 8000f10:	e00b      	b.n	8000f2a <HAL_RCC_OscConfig+0x36e>
 8000f12:	4b5b      	ldr	r3, [pc, #364]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	4a5a      	ldr	r2, [pc, #360]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000f18:	f023 0301 	bic.w	r3, r3, #1
 8000f1c:	6213      	str	r3, [r2, #32]
 8000f1e:	4b58      	ldr	r3, [pc, #352]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	4a57      	ldr	r2, [pc, #348]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000f24:	f023 0304 	bic.w	r3, r3, #4
 8000f28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d015      	beq.n	8000f5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f32:	f7ff fb5d 	bl	80005f0 <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f38:	e00a      	b.n	8000f50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f3a:	f7ff fb59 	bl	80005f0 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e0b1      	b.n	80010b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f50:	4b4b      	ldr	r3, [pc, #300]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0ee      	beq.n	8000f3a <HAL_RCC_OscConfig+0x37e>
 8000f5c:	e014      	b.n	8000f88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f5e:	f7ff fb47 	bl	80005f0 <HAL_GetTick>
 8000f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f64:	e00a      	b.n	8000f7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f66:	f7ff fb43 	bl	80005f0 <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e09b      	b.n	80010b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f7c:	4b40      	ldr	r3, [pc, #256]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1ee      	bne.n	8000f66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f88:	7dfb      	ldrb	r3, [r7, #23]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d105      	bne.n	8000f9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f8e:	4b3c      	ldr	r3, [pc, #240]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4a3b      	ldr	r2, [pc, #236]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 8087 	beq.w	80010b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fa4:	4b36      	ldr	r3, [pc, #216]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 030c 	and.w	r3, r3, #12
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	d061      	beq.n	8001074 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d146      	bne.n	8001046 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb8:	4b33      	ldr	r3, [pc, #204]	; (8001088 <HAL_RCC_OscConfig+0x4cc>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fb17 	bl	80005f0 <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc6:	f7ff fb13 	bl	80005f0 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e06d      	b.n	80010b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd8:	4b29      	ldr	r3, [pc, #164]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1f0      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a1b      	ldr	r3, [r3, #32]
 8000fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fec:	d108      	bne.n	8001000 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fee:	4b24      	ldr	r3, [pc, #144]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	4921      	ldr	r1, [pc, #132]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a19      	ldr	r1, [r3, #32]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	430b      	orrs	r3, r1
 8001012:	491b      	ldr	r1, [pc, #108]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8001014:	4313      	orrs	r3, r2
 8001016:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <HAL_RCC_OscConfig+0x4cc>)
 800101a:	2201      	movs	r2, #1
 800101c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101e:	f7ff fae7 	bl	80005f0 <HAL_GetTick>
 8001022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001026:	f7ff fae3 	bl	80005f0 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e03d      	b.n	80010b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f0      	beq.n	8001026 <HAL_RCC_OscConfig+0x46a>
 8001044:	e035      	b.n	80010b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <HAL_RCC_OscConfig+0x4cc>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fad0 	bl	80005f0 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001054:	f7ff facc 	bl	80005f0 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e026      	b.n	80010b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_RCC_OscConfig+0x4c4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x498>
 8001072:	e01e      	b.n	80010b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d107      	bne.n	800108c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e019      	b.n	80010b4 <HAL_RCC_OscConfig+0x4f8>
 8001080:	40021000 	.word	0x40021000
 8001084:	40007000 	.word	0x40007000
 8001088:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_RCC_OscConfig+0x500>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	429a      	cmp	r2, r3
 800109e:	d106      	bne.n	80010ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d001      	beq.n	80010b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40021000 	.word	0x40021000

080010c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d101      	bne.n	80010d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e0d0      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010d4:	4b6a      	ldr	r3, [pc, #424]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d910      	bls.n	8001104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e2:	4b67      	ldr	r3, [pc, #412]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 0207 	bic.w	r2, r3, #7
 80010ea:	4965      	ldr	r1, [pc, #404]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010f2:	4b63      	ldr	r3, [pc, #396]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d001      	beq.n	8001104 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e0b8      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d020      	beq.n	8001152 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800111c:	4b59      	ldr	r3, [pc, #356]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4a58      	ldr	r2, [pc, #352]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001126:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001134:	4b53      	ldr	r3, [pc, #332]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	4a52      	ldr	r2, [pc, #328]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800113e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001140:	4b50      	ldr	r3, [pc, #320]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	494d      	ldr	r1, [pc, #308]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800114e:	4313      	orrs	r3, r2
 8001150:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d040      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d107      	bne.n	8001176 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001166:	4b47      	ldr	r3, [pc, #284]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d115      	bne.n	800119e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e07f      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d107      	bne.n	800118e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800117e:	4b41      	ldr	r3, [pc, #260]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d109      	bne.n	800119e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e073      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118e:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e06b      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800119e:	4b39      	ldr	r3, [pc, #228]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f023 0203 	bic.w	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	4936      	ldr	r1, [pc, #216]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011b0:	f7ff fa1e 	bl	80005f0 <HAL_GetTick>
 80011b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b6:	e00a      	b.n	80011ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b8:	f7ff fa1a 	bl	80005f0 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e053      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ce:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 020c 	and.w	r2, r3, #12
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	429a      	cmp	r2, r3
 80011de:	d1eb      	bne.n	80011b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011e0:	4b27      	ldr	r3, [pc, #156]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d210      	bcs.n	8001210 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ee:	4b24      	ldr	r3, [pc, #144]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 0207 	bic.w	r2, r3, #7
 80011f6:	4922      	ldr	r1, [pc, #136]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d001      	beq.n	8001210 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e032      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	d008      	beq.n	800122e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800121c:	4b19      	ldr	r3, [pc, #100]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	4916      	ldr	r1, [pc, #88]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	4313      	orrs	r3, r2
 800122c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b00      	cmp	r3, #0
 8001238:	d009      	beq.n	800124e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	490e      	ldr	r1, [pc, #56]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	4313      	orrs	r3, r2
 800124c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800124e:	f000 f821 	bl	8001294 <HAL_RCC_GetSysClockFreq>
 8001252:	4602      	mov	r2, r0
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	490a      	ldr	r1, [pc, #40]	; (8001288 <HAL_RCC_ClockConfig+0x1c8>)
 8001260:	5ccb      	ldrb	r3, [r1, r3]
 8001262:	fa22 f303 	lsr.w	r3, r2, r3
 8001266:	4a09      	ldr	r2, [pc, #36]	; (800128c <HAL_RCC_ClockConfig+0x1cc>)
 8001268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_RCC_ClockConfig+0x1d0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f97c 	bl	800056c <HAL_InitTick>

  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40022000 	.word	0x40022000
 8001284:	40021000 	.word	0x40021000
 8001288:	08002ff4 	.word	0x08002ff4
 800128c:	20000000 	.word	0x20000000
 8001290:	20000004 	.word	0x20000004

08001294 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <HAL_RCC_GetSysClockFreq+0x94>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	d002      	beq.n	80012c4 <HAL_RCC_GetSysClockFreq+0x30>
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d003      	beq.n	80012ca <HAL_RCC_GetSysClockFreq+0x36>
 80012c2:	e027      	b.n	8001314 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_RCC_GetSysClockFreq+0x98>)
 80012c6:	613b      	str	r3, [r7, #16]
      break;
 80012c8:	e027      	b.n	800131a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	0c9b      	lsrs	r3, r3, #18
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	4a17      	ldr	r2, [pc, #92]	; (8001330 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012d4:	5cd3      	ldrb	r3, [r2, r3]
 80012d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d010      	beq.n	8001304 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <HAL_RCC_GetSysClockFreq+0x94>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	0c5b      	lsrs	r3, r3, #17
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	4a11      	ldr	r2, [pc, #68]	; (8001334 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012ee:	5cd3      	ldrb	r3, [r2, r3]
 80012f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a0d      	ldr	r2, [pc, #52]	; (800132c <HAL_RCC_GetSysClockFreq+0x98>)
 80012f6:	fb03 f202 	mul.w	r2, r3, r2
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	e004      	b.n	800130e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a0c      	ldr	r2, [pc, #48]	; (8001338 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001308:	fb02 f303 	mul.w	r3, r2, r3
 800130c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	613b      	str	r3, [r7, #16]
      break;
 8001312:	e002      	b.n	800131a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <HAL_RCC_GetSysClockFreq+0x98>)
 8001316:	613b      	str	r3, [r7, #16]
      break;
 8001318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800131a:	693b      	ldr	r3, [r7, #16]
}
 800131c:	4618      	mov	r0, r3
 800131e:	371c      	adds	r7, #28
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000
 800132c:	007a1200 	.word	0x007a1200
 8001330:	0800300c 	.word	0x0800300c
 8001334:	0800301c 	.word	0x0800301c
 8001338:	003d0900 	.word	0x003d0900

0800133c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001340:	4b02      	ldr	r3, [pc, #8]	; (800134c <HAL_RCC_GetHCLKFreq+0x10>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	20000000 	.word	0x20000000

08001350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001354:	f7ff fff2 	bl	800133c <HAL_RCC_GetHCLKFreq>
 8001358:	4602      	mov	r2, r0
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	0a1b      	lsrs	r3, r3, #8
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	4903      	ldr	r1, [pc, #12]	; (8001374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001366:	5ccb      	ldrb	r3, [r1, r3]
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800136c:	4618      	mov	r0, r3
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40021000 	.word	0x40021000
 8001374:	08003004 	.word	0x08003004

08001378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800137c:	f7ff ffde 	bl	800133c <HAL_RCC_GetHCLKFreq>
 8001380:	4602      	mov	r2, r0
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	0adb      	lsrs	r3, r3, #11
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	4903      	ldr	r1, [pc, #12]	; (800139c <HAL_RCC_GetPCLK2Freq+0x24>)
 800138e:	5ccb      	ldrb	r3, [r1, r3]
 8001390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001394:	4618      	mov	r0, r3
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000
 800139c:	08003004 	.word	0x08003004

080013a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <RCC_Delay+0x34>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <RCC_Delay+0x38>)
 80013ae:	fba2 2303 	umull	r2, r3, r2, r3
 80013b2:	0a5b      	lsrs	r3, r3, #9
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013bc:	bf00      	nop
  }
  while (Delay --);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1e5a      	subs	r2, r3, #1
 80013c2:	60fa      	str	r2, [r7, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f9      	bne.n	80013bc <RCC_Delay+0x1c>
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	20000000 	.word	0x20000000
 80013d8:	10624dd3 	.word	0x10624dd3

080013dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e042      	b.n	8001474 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d106      	bne.n	8001408 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7fe ffcc 	bl	80003a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2224      	movs	r2, #36	; 0x24
 800140c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800141e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f82b 	bl	800147c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001434:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	695a      	ldr	r2, [r3, #20]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001444:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001454:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2220      	movs	r2, #32
 8001460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2220      	movs	r2, #32
 8001468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80014b6:	f023 030c 	bic.w	r3, r3, #12
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	68b9      	ldr	r1, [r7, #8]
 80014c0:	430b      	orrs	r3, r1
 80014c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699a      	ldr	r2, [r3, #24]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a2c      	ldr	r2, [pc, #176]	; (8001590 <UART_SetConfig+0x114>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d103      	bne.n	80014ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80014e4:	f7ff ff48 	bl	8001378 <HAL_RCC_GetPCLK2Freq>
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	e002      	b.n	80014f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80014ec:	f7ff ff30 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
 80014f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	009a      	lsls	r2, r3, #2
 80014fc:	441a      	add	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	fbb2 f3f3 	udiv	r3, r2, r3
 8001508:	4a22      	ldr	r2, [pc, #136]	; (8001594 <UART_SetConfig+0x118>)
 800150a:	fba2 2303 	umull	r2, r3, r2, r3
 800150e:	095b      	lsrs	r3, r3, #5
 8001510:	0119      	lsls	r1, r3, #4
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	009a      	lsls	r2, r3, #2
 800151c:	441a      	add	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	fbb2 f2f3 	udiv	r2, r2, r3
 8001528:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <UART_SetConfig+0x118>)
 800152a:	fba3 0302 	umull	r0, r3, r3, r2
 800152e:	095b      	lsrs	r3, r3, #5
 8001530:	2064      	movs	r0, #100	; 0x64
 8001532:	fb00 f303 	mul.w	r3, r0, r3
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	3332      	adds	r3, #50	; 0x32
 800153c:	4a15      	ldr	r2, [pc, #84]	; (8001594 <UART_SetConfig+0x118>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	095b      	lsrs	r3, r3, #5
 8001544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001548:	4419      	add	r1, r3
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	009a      	lsls	r2, r3, #2
 8001554:	441a      	add	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <UART_SetConfig+0x118>)
 8001562:	fba3 0302 	umull	r0, r3, r3, r2
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2064      	movs	r0, #100	; 0x64
 800156a:	fb00 f303 	mul.w	r3, r0, r3
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	3332      	adds	r3, #50	; 0x32
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <UART_SetConfig+0x118>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	095b      	lsrs	r3, r3, #5
 800157c:	f003 020f 	and.w	r2, r3, #15
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	440a      	add	r2, r1
 8001586:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40013800 	.word	0x40013800
 8001594:	51eb851f 	.word	0x51eb851f

08001598 <app_init>:
uint32_t g_app_cnt;
volatile uint32_t g_tick_cnt;

/********************** external functions definition ************************/
void app_init(void)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b083      	sub	sp, #12
 800159c:	af02      	add	r7, sp, #8
	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 800159e:	b672      	cpsid	i
 80015a0:	4b32      	ldr	r3, [pc, #200]	; (800166c <app_init+0xd4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a32      	ldr	r2, [pc, #200]	; (8001670 <app_init+0xd8>)
 80015a6:	213f      	movs	r1, #63	; 0x3f
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 fd1d 	bl	8001fe8 <sniprintf>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4a30      	ldr	r2, [pc, #192]	; (8001674 <app_init+0xdc>)
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	4b2d      	ldr	r3, [pc, #180]	; (800166c <app_init+0xd4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 f8d3 	bl	8001764 <logger_log_print_>
 80015be:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_init), (int)HAL_GetTick());
 80015c0:	b672      	cpsid	i
 80015c2:	4b2a      	ldr	r3, [pc, #168]	; (800166c <app_init+0xd4>)
 80015c4:	681c      	ldr	r4, [r3, #0]
 80015c6:	f7ff f813 	bl	80005f0 <HAL_GetTick>
 80015ca:	4603      	mov	r3, r0
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <app_init+0xe0>)
 80015d0:	4a2a      	ldr	r2, [pc, #168]	; (800167c <app_init+0xe4>)
 80015d2:	213f      	movs	r1, #63	; 0x3f
 80015d4:	4620      	mov	r0, r4
 80015d6:	f000 fd07 	bl	8001fe8 <sniprintf>
 80015da:	4603      	mov	r3, r0
 80015dc:	4a25      	ldr	r2, [pc, #148]	; (8001674 <app_init+0xdc>)
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b22      	ldr	r3, [pc, #136]	; (800166c <app_init+0xd4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 f8bd 	bl	8001764 <logger_log_print_>
 80015ea:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 80015ec:	b672      	cpsid	i
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <app_init+0xd4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a23      	ldr	r2, [pc, #140]	; (8001680 <app_init+0xe8>)
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	213f      	movs	r1, #63	; 0x3f
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 fcf5 	bl	8001fe8 <sniprintf>
 80015fe:	4603      	mov	r3, r0
 8001600:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <app_init+0xdc>)
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b19      	ldr	r3, [pc, #100]	; (800166c <app_init+0xd4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f000 f8ab 	bl	8001764 <logger_log_print_>
 800160e:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 8001610:	b672      	cpsid	i
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <app_init+0xd4>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <app_init+0xec>)
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	213f      	movs	r1, #63	; 0x3f
 800161c:	4618      	mov	r0, r3
 800161e:	f000 fce3 	bl	8001fe8 <sniprintf>
 8001622:	4603      	mov	r3, r0
 8001624:	4a13      	ldr	r2, [pc, #76]	; (8001674 <app_init+0xdc>)
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <app_init+0xd4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f000 f899 	bl	8001764 <logger_log_print_>
 8001632:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <app_init+0xf0>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %d\r\n", GET_NAME(g_app_cnt), (int)g_app_cnt);
 800163a:	b672      	cpsid	i
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <app_init+0xd4>)
 800163e:	6818      	ldr	r0, [r3, #0]
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <app_init+0xf0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <app_init+0xf4>)
 8001648:	4a11      	ldr	r2, [pc, #68]	; (8001690 <app_init+0xf8>)
 800164a:	213f      	movs	r1, #63	; 0x3f
 800164c:	f000 fccc 	bl	8001fe8 <sniprintf>
 8001650:	4603      	mov	r3, r0
 8001652:	4a08      	ldr	r2, [pc, #32]	; (8001674 <app_init+0xdc>)
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <app_init+0xd4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f882 	bl	8001764 <logger_log_print_>
 8001660:	b662      	cpsie	i
}
 8001662:	bf00      	nop
 8001664:	3704      	adds	r7, #4
 8001666:	46bd      	mov	sp, r7
 8001668:	bd90      	pop	{r4, r7, pc}
 800166a:	bf00      	nop
 800166c:	08003020 	.word	0x08003020
 8001670:	08002f9c 	.word	0x08002f9c
 8001674:	20000128 	.word	0x20000128
 8001678:	08002fa0 	.word	0x08002fa0
 800167c:	08002fac 	.word	0x08002fac
 8001680:	2000000c 	.word	0x2000000c
 8001684:	20000010 	.word	0x20000010
 8001688:	200000e4 	.word	0x200000e4
 800168c:	08002fd0 	.word	0x08002fd0
 8001690:	08002fdc 	.word	0x08002fdc

08001694 <app_update>:

void app_update(void)
{
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b083      	sub	sp, #12
 8001698:	af02      	add	r7, sp, #8
	/* Update App Counter */
	g_app_cnt++;
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <app_update+0x88>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	3301      	adds	r3, #1
 80016a0:	4a1e      	ldr	r2, [pc, #120]	; (800171c <app_update+0x88>)
 80016a2:	6013      	str	r3, [r2, #0]

	/* Print out: Application Update */
	LOGGER_LOG("\r\n");
 80016a4:	b672      	cpsid	i
 80016a6:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <app_update+0x8c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a1e      	ldr	r2, [pc, #120]	; (8001724 <app_update+0x90>)
 80016ac:	213f      	movs	r1, #63	; 0x3f
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 fc9a 	bl	8001fe8 <sniprintf>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4a1c      	ldr	r2, [pc, #112]	; (8001728 <app_update+0x94>)
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4b19      	ldr	r3, [pc, #100]	; (8001720 <app_update+0x8c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f850 	bl	8001764 <logger_log_print_>
 80016c4:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_update), (int)HAL_GetTick());
 80016c6:	b672      	cpsid	i
 80016c8:	4b15      	ldr	r3, [pc, #84]	; (8001720 <app_update+0x8c>)
 80016ca:	681c      	ldr	r4, [r3, #0]
 80016cc:	f7fe ff90 	bl	80005f0 <HAL_GetTick>
 80016d0:	4603      	mov	r3, r0
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <app_update+0x98>)
 80016d6:	4a16      	ldr	r2, [pc, #88]	; (8001730 <app_update+0x9c>)
 80016d8:	213f      	movs	r1, #63	; 0x3f
 80016da:	4620      	mov	r0, r4
 80016dc:	f000 fc84 	bl	8001fe8 <sniprintf>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a11      	ldr	r2, [pc, #68]	; (8001728 <app_update+0x94>)
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <app_update+0x8c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f83a 	bl	8001764 <logger_log_print_>
 80016f0:	b662      	cpsie	i

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %d\r\n", GET_NAME(g_app_cnt), (int)g_app_cnt);
 80016f2:	b672      	cpsid	i
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <app_update+0x8c>)
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <app_update+0x88>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <app_update+0xa0>)
 8001700:	4a0d      	ldr	r2, [pc, #52]	; (8001738 <app_update+0xa4>)
 8001702:	213f      	movs	r1, #63	; 0x3f
 8001704:	f000 fc70 	bl	8001fe8 <sniprintf>
 8001708:	4603      	mov	r3, r0
 800170a:	4a07      	ldr	r2, [pc, #28]	; (8001728 <app_update+0x94>)
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <app_update+0x8c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f826 	bl	8001764 <logger_log_print_>
 8001718:	b662      	cpsie	i

	for (;;);
 800171a:	e7fe      	b.n	800171a <app_update+0x86>
 800171c:	200000e4 	.word	0x200000e4
 8001720:	08003020 	.word	0x08003020
 8001724:	08002f9c 	.word	0x08002f9c
 8001728:	20000128 	.word	0x20000128
 800172c:	08002fe8 	.word	0x08002fe8
 8001730:	08002fac 	.word	0x08002fac
 8001734:	08002fd0 	.word	0x08002fd0
 8001738:	08002fdc 	.word	0x08002fdc

0800173c <HAL_GPIO_EXTI_Callback>:
	g_tick_cnt++;
}

/* Callback in non blocking modes (Interrupt and DMA) */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	80fb      	strh	r3, [r7, #6]
	// Check which version of the gpio triggered this callback
	if (GPIO_Pin == BTN_A_PIN)
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800174c:	d103      	bne.n	8001756 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
 800174e:	2120      	movs	r1, #32
 8001750:	4803      	ldr	r0, [pc, #12]	; (8001760 <HAL_GPIO_EXTI_Callback+0x24>)
 8001752:	f7ff fa01 	bl	8000b58 <HAL_GPIO_TogglePin>
	}
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40010800 	.word	0x40010800

08001764 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	printf(msg);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 fc29 	bl	8001fc4 <iprintf>
	fflush(stdout);
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <logger_log_print_+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4618      	mov	r0, r3
 800177a:	f000 fb4d 	bl	8001e18 <fflush>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000074 	.word	0x20000074

0800178c <findslot>:
 800178c:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <findslot+0x2c>)
 800178e:	b510      	push	{r4, lr}
 8001790:	4604      	mov	r4, r0
 8001792:	6818      	ldr	r0, [r3, #0]
 8001794:	b118      	cbz	r0, 800179e <findslot+0x12>
 8001796:	6a03      	ldr	r3, [r0, #32]
 8001798:	b90b      	cbnz	r3, 800179e <findslot+0x12>
 800179a:	f000 fbdd 	bl	8001f58 <__sinit>
 800179e:	2c13      	cmp	r4, #19
 80017a0:	d807      	bhi.n	80017b2 <findslot+0x26>
 80017a2:	4806      	ldr	r0, [pc, #24]	; (80017bc <findslot+0x30>)
 80017a4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80017a8:	3201      	adds	r2, #1
 80017aa:	d002      	beq.n	80017b2 <findslot+0x26>
 80017ac:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80017b0:	bd10      	pop	{r4, pc}
 80017b2:	2000      	movs	r0, #0
 80017b4:	e7fc      	b.n	80017b0 <findslot+0x24>
 80017b6:	bf00      	nop
 80017b8:	20000074 	.word	0x20000074
 80017bc:	20000138 	.word	0x20000138

080017c0 <error>:
 80017c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c2:	4604      	mov	r4, r0
 80017c4:	f000 fcd6 	bl	8002174 <__errno>
 80017c8:	2613      	movs	r6, #19
 80017ca:	4605      	mov	r5, r0
 80017cc:	2700      	movs	r7, #0
 80017ce:	4630      	mov	r0, r6
 80017d0:	4639      	mov	r1, r7
 80017d2:	beab      	bkpt	0x00ab
 80017d4:	4606      	mov	r6, r0
 80017d6:	4620      	mov	r0, r4
 80017d8:	602e      	str	r6, [r5, #0]
 80017da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080017dc <checkerror>:
 80017dc:	1c43      	adds	r3, r0, #1
 80017de:	d101      	bne.n	80017e4 <checkerror+0x8>
 80017e0:	f7ff bfee 	b.w	80017c0 <error>
 80017e4:	4770      	bx	lr

080017e6 <_swiread>:
 80017e6:	b530      	push	{r4, r5, lr}
 80017e8:	b085      	sub	sp, #20
 80017ea:	2406      	movs	r4, #6
 80017ec:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80017f0:	9203      	str	r2, [sp, #12]
 80017f2:	ad01      	add	r5, sp, #4
 80017f4:	4620      	mov	r0, r4
 80017f6:	4629      	mov	r1, r5
 80017f8:	beab      	bkpt	0x00ab
 80017fa:	4604      	mov	r4, r0
 80017fc:	4620      	mov	r0, r4
 80017fe:	f7ff ffed 	bl	80017dc <checkerror>
 8001802:	b005      	add	sp, #20
 8001804:	bd30      	pop	{r4, r5, pc}

08001806 <_read>:
 8001806:	b570      	push	{r4, r5, r6, lr}
 8001808:	460e      	mov	r6, r1
 800180a:	4615      	mov	r5, r2
 800180c:	f7ff ffbe 	bl	800178c <findslot>
 8001810:	4604      	mov	r4, r0
 8001812:	b930      	cbnz	r0, 8001822 <_read+0x1c>
 8001814:	f000 fcae 	bl	8002174 <__errno>
 8001818:	2309      	movs	r3, #9
 800181a:	6003      	str	r3, [r0, #0]
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	bd70      	pop	{r4, r5, r6, pc}
 8001822:	462a      	mov	r2, r5
 8001824:	4631      	mov	r1, r6
 8001826:	6800      	ldr	r0, [r0, #0]
 8001828:	f7ff ffdd 	bl	80017e6 <_swiread>
 800182c:	1c43      	adds	r3, r0, #1
 800182e:	bf1f      	itttt	ne
 8001830:	6863      	ldrne	r3, [r4, #4]
 8001832:	1a28      	subne	r0, r5, r0
 8001834:	181b      	addne	r3, r3, r0
 8001836:	6063      	strne	r3, [r4, #4]
 8001838:	e7f2      	b.n	8001820 <_read+0x1a>

0800183a <_swilseek>:
 800183a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800183c:	460c      	mov	r4, r1
 800183e:	4616      	mov	r6, r2
 8001840:	f7ff ffa4 	bl	800178c <findslot>
 8001844:	4605      	mov	r5, r0
 8001846:	b940      	cbnz	r0, 800185a <_swilseek+0x20>
 8001848:	f000 fc94 	bl	8002174 <__errno>
 800184c:	2309      	movs	r3, #9
 800184e:	6003      	str	r3, [r0, #0]
 8001850:	f04f 34ff 	mov.w	r4, #4294967295
 8001854:	4620      	mov	r0, r4
 8001856:	b003      	add	sp, #12
 8001858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800185a:	2e02      	cmp	r6, #2
 800185c:	d903      	bls.n	8001866 <_swilseek+0x2c>
 800185e:	f000 fc89 	bl	8002174 <__errno>
 8001862:	2316      	movs	r3, #22
 8001864:	e7f3      	b.n	800184e <_swilseek+0x14>
 8001866:	2e01      	cmp	r6, #1
 8001868:	d112      	bne.n	8001890 <_swilseek+0x56>
 800186a:	6843      	ldr	r3, [r0, #4]
 800186c:	18e4      	adds	r4, r4, r3
 800186e:	d4f6      	bmi.n	800185e <_swilseek+0x24>
 8001870:	682b      	ldr	r3, [r5, #0]
 8001872:	260a      	movs	r6, #10
 8001874:	466f      	mov	r7, sp
 8001876:	e9cd 3400 	strd	r3, r4, [sp]
 800187a:	4630      	mov	r0, r6
 800187c:	4639      	mov	r1, r7
 800187e:	beab      	bkpt	0x00ab
 8001880:	4606      	mov	r6, r0
 8001882:	4630      	mov	r0, r6
 8001884:	f7ff ffaa 	bl	80017dc <checkerror>
 8001888:	2800      	cmp	r0, #0
 800188a:	dbe1      	blt.n	8001850 <_swilseek+0x16>
 800188c:	606c      	str	r4, [r5, #4]
 800188e:	e7e1      	b.n	8001854 <_swilseek+0x1a>
 8001890:	2e02      	cmp	r6, #2
 8001892:	6803      	ldr	r3, [r0, #0]
 8001894:	d1ec      	bne.n	8001870 <_swilseek+0x36>
 8001896:	260c      	movs	r6, #12
 8001898:	466f      	mov	r7, sp
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	4630      	mov	r0, r6
 800189e:	4639      	mov	r1, r7
 80018a0:	beab      	bkpt	0x00ab
 80018a2:	4606      	mov	r6, r0
 80018a4:	4630      	mov	r0, r6
 80018a6:	f7ff ff99 	bl	80017dc <checkerror>
 80018aa:	1c43      	adds	r3, r0, #1
 80018ac:	d0d0      	beq.n	8001850 <_swilseek+0x16>
 80018ae:	4404      	add	r4, r0
 80018b0:	e7de      	b.n	8001870 <_swilseek+0x36>

080018b2 <_lseek>:
 80018b2:	f7ff bfc2 	b.w	800183a <_swilseek>

080018b6 <_swiwrite>:
 80018b6:	b530      	push	{r4, r5, lr}
 80018b8:	b085      	sub	sp, #20
 80018ba:	2405      	movs	r4, #5
 80018bc:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80018c0:	9203      	str	r2, [sp, #12]
 80018c2:	ad01      	add	r5, sp, #4
 80018c4:	4620      	mov	r0, r4
 80018c6:	4629      	mov	r1, r5
 80018c8:	beab      	bkpt	0x00ab
 80018ca:	4604      	mov	r4, r0
 80018cc:	4620      	mov	r0, r4
 80018ce:	f7ff ff85 	bl	80017dc <checkerror>
 80018d2:	b005      	add	sp, #20
 80018d4:	bd30      	pop	{r4, r5, pc}

080018d6 <_write>:
 80018d6:	b570      	push	{r4, r5, r6, lr}
 80018d8:	460e      	mov	r6, r1
 80018da:	4615      	mov	r5, r2
 80018dc:	f7ff ff56 	bl	800178c <findslot>
 80018e0:	4604      	mov	r4, r0
 80018e2:	b930      	cbnz	r0, 80018f2 <_write+0x1c>
 80018e4:	f000 fc46 	bl	8002174 <__errno>
 80018e8:	2309      	movs	r3, #9
 80018ea:	6003      	str	r3, [r0, #0]
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	bd70      	pop	{r4, r5, r6, pc}
 80018f2:	462a      	mov	r2, r5
 80018f4:	4631      	mov	r1, r6
 80018f6:	6800      	ldr	r0, [r0, #0]
 80018f8:	f7ff ffdd 	bl	80018b6 <_swiwrite>
 80018fc:	1e03      	subs	r3, r0, #0
 80018fe:	dbf5      	blt.n	80018ec <_write+0x16>
 8001900:	6862      	ldr	r2, [r4, #4]
 8001902:	1ae8      	subs	r0, r5, r3
 8001904:	4402      	add	r2, r0
 8001906:	42ab      	cmp	r3, r5
 8001908:	6062      	str	r2, [r4, #4]
 800190a:	d1f1      	bne.n	80018f0 <_write+0x1a>
 800190c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff bf55 	b.w	80017c0 <error>

08001916 <_swiclose>:
 8001916:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001918:	2402      	movs	r4, #2
 800191a:	9001      	str	r0, [sp, #4]
 800191c:	ad01      	add	r5, sp, #4
 800191e:	4620      	mov	r0, r4
 8001920:	4629      	mov	r1, r5
 8001922:	beab      	bkpt	0x00ab
 8001924:	4604      	mov	r4, r0
 8001926:	4620      	mov	r0, r4
 8001928:	f7ff ff58 	bl	80017dc <checkerror>
 800192c:	b003      	add	sp, #12
 800192e:	bd30      	pop	{r4, r5, pc}

08001930 <_close>:
 8001930:	b538      	push	{r3, r4, r5, lr}
 8001932:	4605      	mov	r5, r0
 8001934:	f7ff ff2a 	bl	800178c <findslot>
 8001938:	4604      	mov	r4, r0
 800193a:	b930      	cbnz	r0, 800194a <_close+0x1a>
 800193c:	f000 fc1a 	bl	8002174 <__errno>
 8001940:	2309      	movs	r3, #9
 8001942:	6003      	str	r3, [r0, #0]
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	bd38      	pop	{r3, r4, r5, pc}
 800194a:	3d01      	subs	r5, #1
 800194c:	2d01      	cmp	r5, #1
 800194e:	d809      	bhi.n	8001964 <_close+0x34>
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <_close+0x48>)
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	429a      	cmp	r2, r3
 8001958:	d104      	bne.n	8001964 <_close+0x34>
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
 800195e:	6003      	str	r3, [r0, #0]
 8001960:	2000      	movs	r0, #0
 8001962:	e7f1      	b.n	8001948 <_close+0x18>
 8001964:	6820      	ldr	r0, [r4, #0]
 8001966:	f7ff ffd6 	bl	8001916 <_swiclose>
 800196a:	2800      	cmp	r0, #0
 800196c:	d1ec      	bne.n	8001948 <_close+0x18>
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
 8001972:	6023      	str	r3, [r4, #0]
 8001974:	e7e8      	b.n	8001948 <_close+0x18>
 8001976:	bf00      	nop
 8001978:	20000138 	.word	0x20000138

0800197c <_swistat>:
 800197c:	b570      	push	{r4, r5, r6, lr}
 800197e:	460c      	mov	r4, r1
 8001980:	f7ff ff04 	bl	800178c <findslot>
 8001984:	4605      	mov	r5, r0
 8001986:	b930      	cbnz	r0, 8001996 <_swistat+0x1a>
 8001988:	f000 fbf4 	bl	8002174 <__errno>
 800198c:	2309      	movs	r3, #9
 800198e:	6003      	str	r3, [r0, #0]
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	bd70      	pop	{r4, r5, r6, pc}
 8001996:	6863      	ldr	r3, [r4, #4]
 8001998:	260c      	movs	r6, #12
 800199a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800199e:	6063      	str	r3, [r4, #4]
 80019a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019a4:	64a3      	str	r3, [r4, #72]	; 0x48
 80019a6:	4630      	mov	r0, r6
 80019a8:	4629      	mov	r1, r5
 80019aa:	beab      	bkpt	0x00ab
 80019ac:	4605      	mov	r5, r0
 80019ae:	4628      	mov	r0, r5
 80019b0:	f7ff ff14 	bl	80017dc <checkerror>
 80019b4:	1c43      	adds	r3, r0, #1
 80019b6:	bf1c      	itt	ne
 80019b8:	6120      	strne	r0, [r4, #16]
 80019ba:	2000      	movne	r0, #0
 80019bc:	e7ea      	b.n	8001994 <_swistat+0x18>

080019be <_fstat>:
 80019be:	460b      	mov	r3, r1
 80019c0:	b510      	push	{r4, lr}
 80019c2:	2100      	movs	r1, #0
 80019c4:	4604      	mov	r4, r0
 80019c6:	2258      	movs	r2, #88	; 0x58
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fb84 	bl	80020d6 <memset>
 80019ce:	4601      	mov	r1, r0
 80019d0:	4620      	mov	r0, r4
 80019d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019d6:	f7ff bfd1 	b.w	800197c <_swistat>

080019da <_stat>:
 80019da:	b538      	push	{r3, r4, r5, lr}
 80019dc:	460d      	mov	r5, r1
 80019de:	4604      	mov	r4, r0
 80019e0:	2258      	movs	r2, #88	; 0x58
 80019e2:	2100      	movs	r1, #0
 80019e4:	4628      	mov	r0, r5
 80019e6:	f000 fb76 	bl	80020d6 <memset>
 80019ea:	4620      	mov	r0, r4
 80019ec:	2100      	movs	r1, #0
 80019ee:	f000 f811 	bl	8001a14 <_swiopen>
 80019f2:	1c43      	adds	r3, r0, #1
 80019f4:	4604      	mov	r4, r0
 80019f6:	d00b      	beq.n	8001a10 <_stat+0x36>
 80019f8:	686b      	ldr	r3, [r5, #4]
 80019fa:	4629      	mov	r1, r5
 80019fc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001a00:	606b      	str	r3, [r5, #4]
 8001a02:	f7ff ffbb 	bl	800197c <_swistat>
 8001a06:	4605      	mov	r5, r0
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f7ff ff91 	bl	8001930 <_close>
 8001a0e:	462c      	mov	r4, r5
 8001a10:	4620      	mov	r0, r4
 8001a12:	bd38      	pop	{r3, r4, r5, pc}

08001a14 <_swiopen>:
 8001a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a18:	4607      	mov	r7, r0
 8001a1a:	460e      	mov	r6, r1
 8001a1c:	2500      	movs	r5, #0
 8001a1e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001ac4 <_swiopen+0xb0>
 8001a22:	b097      	sub	sp, #92	; 0x5c
 8001a24:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8001a28:	1c61      	adds	r1, r4, #1
 8001a2a:	d037      	beq.n	8001a9c <_swiopen+0x88>
 8001a2c:	3501      	adds	r5, #1
 8001a2e:	2d14      	cmp	r5, #20
 8001a30:	d1f8      	bne.n	8001a24 <_swiopen+0x10>
 8001a32:	f000 fb9f 	bl	8002174 <__errno>
 8001a36:	2318      	movs	r3, #24
 8001a38:	f04f 34ff 	mov.w	r4, #4294967295
 8001a3c:	6003      	str	r3, [r0, #0]
 8001a3e:	e03d      	b.n	8001abc <_swiopen+0xa8>
 8001a40:	f240 6301 	movw	r3, #1537	; 0x601
 8001a44:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8001a48:	07b2      	lsls	r2, r6, #30
 8001a4a:	bf48      	it	mi
 8001a4c:	f044 0402 	orrmi.w	r4, r4, #2
 8001a50:	421e      	tst	r6, r3
 8001a52:	bf18      	it	ne
 8001a54:	f044 0404 	orrne.w	r4, r4, #4
 8001a58:	0733      	lsls	r3, r6, #28
 8001a5a:	bf48      	it	mi
 8001a5c:	f024 0404 	bicmi.w	r4, r4, #4
 8001a60:	4638      	mov	r0, r7
 8001a62:	bf48      	it	mi
 8001a64:	f044 0408 	orrmi.w	r4, r4, #8
 8001a68:	9700      	str	r7, [sp, #0]
 8001a6a:	f7fe fb6f 	bl	800014c <strlen>
 8001a6e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001a72:	2401      	movs	r4, #1
 8001a74:	4620      	mov	r0, r4
 8001a76:	4649      	mov	r1, r9
 8001a78:	beab      	bkpt	0x00ab
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	2c00      	cmp	r4, #0
 8001a7e:	db08      	blt.n	8001a92 <_swiopen+0x7e>
 8001a80:	2300      	movs	r3, #0
 8001a82:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8001a86:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8001a8a:	462c      	mov	r4, r5
 8001a8c:	f8c8 3004 	str.w	r3, [r8, #4]
 8001a90:	e014      	b.n	8001abc <_swiopen+0xa8>
 8001a92:	4620      	mov	r0, r4
 8001a94:	f7ff fe94 	bl	80017c0 <error>
 8001a98:	4604      	mov	r4, r0
 8001a9a:	e00f      	b.n	8001abc <_swiopen+0xa8>
 8001a9c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8001aa0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001aa4:	46e9      	mov	r9, sp
 8001aa6:	d1cb      	bne.n	8001a40 <_swiopen+0x2c>
 8001aa8:	4649      	mov	r1, r9
 8001aaa:	4638      	mov	r0, r7
 8001aac:	f7ff ff95 	bl	80019da <_stat>
 8001ab0:	3001      	adds	r0, #1
 8001ab2:	d0c5      	beq.n	8001a40 <_swiopen+0x2c>
 8001ab4:	f000 fb5e 	bl	8002174 <__errno>
 8001ab8:	2311      	movs	r3, #17
 8001aba:	6003      	str	r3, [r0, #0]
 8001abc:	4620      	mov	r0, r4
 8001abe:	b017      	add	sp, #92	; 0x5c
 8001ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ac4:	20000138 	.word	0x20000138

08001ac8 <_get_semihosting_exts>:
 8001ac8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001acc:	4606      	mov	r6, r0
 8001ace:	460f      	mov	r7, r1
 8001ad0:	482a      	ldr	r0, [pc, #168]	; (8001b7c <_get_semihosting_exts+0xb4>)
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4615      	mov	r5, r2
 8001ad6:	f7ff ff9d 	bl	8001a14 <_swiopen>
 8001ada:	4604      	mov	r4, r0
 8001adc:	462a      	mov	r2, r5
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4630      	mov	r0, r6
 8001ae2:	f000 faf8 	bl	80020d6 <memset>
 8001ae6:	1c63      	adds	r3, r4, #1
 8001ae8:	d016      	beq.n	8001b18 <_get_semihosting_exts+0x50>
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff fe4e 	bl	800178c <findslot>
 8001af0:	f04f 080c 	mov.w	r8, #12
 8001af4:	4681      	mov	r9, r0
 8001af6:	4640      	mov	r0, r8
 8001af8:	4649      	mov	r1, r9
 8001afa:	beab      	bkpt	0x00ab
 8001afc:	4680      	mov	r8, r0
 8001afe:	4640      	mov	r0, r8
 8001b00:	f7ff fe6c 	bl	80017dc <checkerror>
 8001b04:	2803      	cmp	r0, #3
 8001b06:	dd02      	ble.n	8001b0e <_get_semihosting_exts+0x46>
 8001b08:	1ec3      	subs	r3, r0, #3
 8001b0a:	42ab      	cmp	r3, r5
 8001b0c:	dc08      	bgt.n	8001b20 <_get_semihosting_exts+0x58>
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f7ff ff0e 	bl	8001930 <_close>
 8001b14:	f04f 34ff 	mov.w	r4, #4294967295
 8001b18:	4620      	mov	r0, r4
 8001b1a:	b003      	add	sp, #12
 8001b1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b20:	2204      	movs	r2, #4
 8001b22:	4620      	mov	r0, r4
 8001b24:	eb0d 0102 	add.w	r1, sp, r2
 8001b28:	f7ff fe6d 	bl	8001806 <_read>
 8001b2c:	2803      	cmp	r0, #3
 8001b2e:	ddee      	ble.n	8001b0e <_get_semihosting_exts+0x46>
 8001b30:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001b34:	2b53      	cmp	r3, #83	; 0x53
 8001b36:	d1ea      	bne.n	8001b0e <_get_semihosting_exts+0x46>
 8001b38:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001b3c:	2b48      	cmp	r3, #72	; 0x48
 8001b3e:	d1e6      	bne.n	8001b0e <_get_semihosting_exts+0x46>
 8001b40:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001b44:	2b46      	cmp	r3, #70	; 0x46
 8001b46:	d1e2      	bne.n	8001b0e <_get_semihosting_exts+0x46>
 8001b48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001b4c:	2b42      	cmp	r3, #66	; 0x42
 8001b4e:	d1de      	bne.n	8001b0e <_get_semihosting_exts+0x46>
 8001b50:	2201      	movs	r2, #1
 8001b52:	4639      	mov	r1, r7
 8001b54:	4620      	mov	r0, r4
 8001b56:	f7ff fe70 	bl	800183a <_swilseek>
 8001b5a:	2800      	cmp	r0, #0
 8001b5c:	dbd7      	blt.n	8001b0e <_get_semihosting_exts+0x46>
 8001b5e:	462a      	mov	r2, r5
 8001b60:	4631      	mov	r1, r6
 8001b62:	4620      	mov	r0, r4
 8001b64:	f7ff fe4f 	bl	8001806 <_read>
 8001b68:	4605      	mov	r5, r0
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f7ff fee0 	bl	8001930 <_close>
 8001b70:	4628      	mov	r0, r5
 8001b72:	f7ff fe33 	bl	80017dc <checkerror>
 8001b76:	4604      	mov	r4, r0
 8001b78:	e7ce      	b.n	8001b18 <_get_semihosting_exts+0x50>
 8001b7a:	bf00      	nop
 8001b7c:	08003024 	.word	0x08003024

08001b80 <initialise_semihosting_exts>:
 8001b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001b82:	2100      	movs	r1, #0
 8001b84:	2201      	movs	r2, #1
 8001b86:	4d09      	ldr	r5, [pc, #36]	; (8001bac <initialise_semihosting_exts+0x2c>)
 8001b88:	4c09      	ldr	r4, [pc, #36]	; (8001bb0 <initialise_semihosting_exts+0x30>)
 8001b8a:	a801      	add	r0, sp, #4
 8001b8c:	6029      	str	r1, [r5, #0]
 8001b8e:	6022      	str	r2, [r4, #0]
 8001b90:	f7ff ff9a 	bl	8001ac8 <_get_semihosting_exts>
 8001b94:	2800      	cmp	r0, #0
 8001b96:	dd07      	ble.n	8001ba8 <initialise_semihosting_exts+0x28>
 8001b98:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001b9c:	f003 0201 	and.w	r2, r3, #1
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	602a      	str	r2, [r5, #0]
 8001ba6:	6023      	str	r3, [r4, #0]
 8001ba8:	b003      	add	sp, #12
 8001baa:	bd30      	pop	{r4, r5, pc}
 8001bac:	20000014 	.word	0x20000014
 8001bb0:	20000018 	.word	0x20000018

08001bb4 <_has_ext_stdout_stderr>:
 8001bb4:	b510      	push	{r4, lr}
 8001bb6:	4c04      	ldr	r4, [pc, #16]	; (8001bc8 <_has_ext_stdout_stderr+0x14>)
 8001bb8:	6823      	ldr	r3, [r4, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	da01      	bge.n	8001bc2 <_has_ext_stdout_stderr+0xe>
 8001bbe:	f7ff ffdf 	bl	8001b80 <initialise_semihosting_exts>
 8001bc2:	6820      	ldr	r0, [r4, #0]
 8001bc4:	bd10      	pop	{r4, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000018 	.word	0x20000018

08001bcc <initialise_monitor_handles>:
 8001bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	2400      	movs	r4, #0
 8001bd4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8001c78 <initialise_monitor_handles+0xac>
 8001bd8:	b085      	sub	sp, #20
 8001bda:	f8cd 9004 	str.w	r9, [sp, #4]
 8001bde:	af01      	add	r7, sp, #4
 8001be0:	9303      	str	r3, [sp, #12]
 8001be2:	2501      	movs	r5, #1
 8001be4:	9402      	str	r4, [sp, #8]
 8001be6:	4628      	mov	r0, r5
 8001be8:	4639      	mov	r1, r7
 8001bea:	beab      	bkpt	0x00ab
 8001bec:	4605      	mov	r5, r0
 8001bee:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8001c7c <initialise_monitor_handles+0xb0>
 8001bf6:	4623      	mov	r3, r4
 8001bf8:	4c21      	ldr	r4, [pc, #132]	; (8001c80 <initialise_monitor_handles+0xb4>)
 8001bfa:	f8c8 5000 	str.w	r5, [r8]
 8001bfe:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8001c02:	3301      	adds	r3, #1
 8001c04:	2b14      	cmp	r3, #20
 8001c06:	d1fa      	bne.n	8001bfe <initialise_monitor_handles+0x32>
 8001c08:	f7ff ffd4 	bl	8001bb4 <_has_ext_stdout_stderr>
 8001c0c:	4d1d      	ldr	r5, [pc, #116]	; (8001c84 <initialise_monitor_handles+0xb8>)
 8001c0e:	b1d0      	cbz	r0, 8001c46 <initialise_monitor_handles+0x7a>
 8001c10:	f04f 0a03 	mov.w	sl, #3
 8001c14:	2304      	movs	r3, #4
 8001c16:	f8cd 9004 	str.w	r9, [sp, #4]
 8001c1a:	2601      	movs	r6, #1
 8001c1c:	f8cd a00c 	str.w	sl, [sp, #12]
 8001c20:	9302      	str	r3, [sp, #8]
 8001c22:	4630      	mov	r0, r6
 8001c24:	4639      	mov	r1, r7
 8001c26:	beab      	bkpt	0x00ab
 8001c28:	4683      	mov	fp, r0
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <initialise_monitor_handles+0xbc>)
 8001c2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8001c30:	f8c3 b000 	str.w	fp, [r3]
 8001c34:	2308      	movs	r3, #8
 8001c36:	f8cd a00c 	str.w	sl, [sp, #12]
 8001c3a:	9302      	str	r3, [sp, #8]
 8001c3c:	4630      	mov	r0, r6
 8001c3e:	4639      	mov	r1, r7
 8001c40:	beab      	bkpt	0x00ab
 8001c42:	4606      	mov	r6, r0
 8001c44:	602e      	str	r6, [r5, #0]
 8001c46:	2600      	movs	r6, #0
 8001c48:	682b      	ldr	r3, [r5, #0]
 8001c4a:	6066      	str	r6, [r4, #4]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	bf02      	ittt	eq
 8001c50:	4b0d      	ldreq	r3, [pc, #52]	; (8001c88 <initialise_monitor_handles+0xbc>)
 8001c52:	681b      	ldreq	r3, [r3, #0]
 8001c54:	602b      	streq	r3, [r5, #0]
 8001c56:	f8d8 3000 	ldr.w	r3, [r8]
 8001c5a:	6023      	str	r3, [r4, #0]
 8001c5c:	f7ff ffaa 	bl	8001bb4 <_has_ext_stdout_stderr>
 8001c60:	b130      	cbz	r0, 8001c70 <initialise_monitor_handles+0xa4>
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <initialise_monitor_handles+0xbc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8001c6a:	682b      	ldr	r3, [r5, #0]
 8001c6c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8001c70:	b005      	add	sp, #20
 8001c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c76:	bf00      	nop
 8001c78:	0800303a 	.word	0x0800303a
 8001c7c:	20000130 	.word	0x20000130
 8001c80:	20000138 	.word	0x20000138
 8001c84:	2000012c 	.word	0x2000012c
 8001c88:	20000134 	.word	0x20000134

08001c8c <_isatty>:
 8001c8c:	b570      	push	{r4, r5, r6, lr}
 8001c8e:	f7ff fd7d 	bl	800178c <findslot>
 8001c92:	2509      	movs	r5, #9
 8001c94:	4604      	mov	r4, r0
 8001c96:	b920      	cbnz	r0, 8001ca2 <_isatty+0x16>
 8001c98:	f000 fa6c 	bl	8002174 <__errno>
 8001c9c:	6005      	str	r5, [r0, #0]
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	bd70      	pop	{r4, r5, r6, pc}
 8001ca2:	4628      	mov	r0, r5
 8001ca4:	4621      	mov	r1, r4
 8001ca6:	beab      	bkpt	0x00ab
 8001ca8:	4604      	mov	r4, r0
 8001caa:	2c01      	cmp	r4, #1
 8001cac:	d0f7      	beq.n	8001c9e <_isatty+0x12>
 8001cae:	f000 fa61 	bl	8002174 <__errno>
 8001cb2:	2400      	movs	r4, #0
 8001cb4:	4605      	mov	r5, r0
 8001cb6:	2613      	movs	r6, #19
 8001cb8:	4630      	mov	r0, r6
 8001cba:	4621      	mov	r1, r4
 8001cbc:	beab      	bkpt	0x00ab
 8001cbe:	4606      	mov	r6, r0
 8001cc0:	602e      	str	r6, [r5, #0]
 8001cc2:	e7ec      	b.n	8001c9e <_isatty+0x12>

08001cc4 <__sflush_r>:
 8001cc4:	898a      	ldrh	r2, [r1, #12]
 8001cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc8:	4605      	mov	r5, r0
 8001cca:	0710      	lsls	r0, r2, #28
 8001ccc:	460c      	mov	r4, r1
 8001cce:	d457      	bmi.n	8001d80 <__sflush_r+0xbc>
 8001cd0:	684b      	ldr	r3, [r1, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	dc04      	bgt.n	8001ce0 <__sflush_r+0x1c>
 8001cd6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	dc01      	bgt.n	8001ce0 <__sflush_r+0x1c>
 8001cdc:	2000      	movs	r0, #0
 8001cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ce0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ce2:	2e00      	cmp	r6, #0
 8001ce4:	d0fa      	beq.n	8001cdc <__sflush_r+0x18>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001cec:	682f      	ldr	r7, [r5, #0]
 8001cee:	6a21      	ldr	r1, [r4, #32]
 8001cf0:	602b      	str	r3, [r5, #0]
 8001cf2:	d032      	beq.n	8001d5a <__sflush_r+0x96>
 8001cf4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001cf6:	89a3      	ldrh	r3, [r4, #12]
 8001cf8:	075a      	lsls	r2, r3, #29
 8001cfa:	d505      	bpl.n	8001d08 <__sflush_r+0x44>
 8001cfc:	6863      	ldr	r3, [r4, #4]
 8001cfe:	1ac0      	subs	r0, r0, r3
 8001d00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d02:	b10b      	cbz	r3, 8001d08 <__sflush_r+0x44>
 8001d04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d06:	1ac0      	subs	r0, r0, r3
 8001d08:	2300      	movs	r3, #0
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d0e:	4628      	mov	r0, r5
 8001d10:	6a21      	ldr	r1, [r4, #32]
 8001d12:	47b0      	blx	r6
 8001d14:	1c43      	adds	r3, r0, #1
 8001d16:	89a3      	ldrh	r3, [r4, #12]
 8001d18:	d106      	bne.n	8001d28 <__sflush_r+0x64>
 8001d1a:	6829      	ldr	r1, [r5, #0]
 8001d1c:	291d      	cmp	r1, #29
 8001d1e:	d82b      	bhi.n	8001d78 <__sflush_r+0xb4>
 8001d20:	4a28      	ldr	r2, [pc, #160]	; (8001dc4 <__sflush_r+0x100>)
 8001d22:	410a      	asrs	r2, r1
 8001d24:	07d6      	lsls	r6, r2, #31
 8001d26:	d427      	bmi.n	8001d78 <__sflush_r+0xb4>
 8001d28:	2200      	movs	r2, #0
 8001d2a:	6062      	str	r2, [r4, #4]
 8001d2c:	6922      	ldr	r2, [r4, #16]
 8001d2e:	04d9      	lsls	r1, r3, #19
 8001d30:	6022      	str	r2, [r4, #0]
 8001d32:	d504      	bpl.n	8001d3e <__sflush_r+0x7a>
 8001d34:	1c42      	adds	r2, r0, #1
 8001d36:	d101      	bne.n	8001d3c <__sflush_r+0x78>
 8001d38:	682b      	ldr	r3, [r5, #0]
 8001d3a:	b903      	cbnz	r3, 8001d3e <__sflush_r+0x7a>
 8001d3c:	6560      	str	r0, [r4, #84]	; 0x54
 8001d3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d40:	602f      	str	r7, [r5, #0]
 8001d42:	2900      	cmp	r1, #0
 8001d44:	d0ca      	beq.n	8001cdc <__sflush_r+0x18>
 8001d46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d4a:	4299      	cmp	r1, r3
 8001d4c:	d002      	beq.n	8001d54 <__sflush_r+0x90>
 8001d4e:	4628      	mov	r0, r5
 8001d50:	f000 fa3e 	bl	80021d0 <_free_r>
 8001d54:	2000      	movs	r0, #0
 8001d56:	6360      	str	r0, [r4, #52]	; 0x34
 8001d58:	e7c1      	b.n	8001cde <__sflush_r+0x1a>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	4628      	mov	r0, r5
 8001d5e:	47b0      	blx	r6
 8001d60:	1c41      	adds	r1, r0, #1
 8001d62:	d1c8      	bne.n	8001cf6 <__sflush_r+0x32>
 8001d64:	682b      	ldr	r3, [r5, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0c5      	beq.n	8001cf6 <__sflush_r+0x32>
 8001d6a:	2b1d      	cmp	r3, #29
 8001d6c:	d001      	beq.n	8001d72 <__sflush_r+0xae>
 8001d6e:	2b16      	cmp	r3, #22
 8001d70:	d101      	bne.n	8001d76 <__sflush_r+0xb2>
 8001d72:	602f      	str	r7, [r5, #0]
 8001d74:	e7b2      	b.n	8001cdc <__sflush_r+0x18>
 8001d76:	89a3      	ldrh	r3, [r4, #12]
 8001d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d7c:	81a3      	strh	r3, [r4, #12]
 8001d7e:	e7ae      	b.n	8001cde <__sflush_r+0x1a>
 8001d80:	690f      	ldr	r7, [r1, #16]
 8001d82:	2f00      	cmp	r7, #0
 8001d84:	d0aa      	beq.n	8001cdc <__sflush_r+0x18>
 8001d86:	0793      	lsls	r3, r2, #30
 8001d88:	bf18      	it	ne
 8001d8a:	2300      	movne	r3, #0
 8001d8c:	680e      	ldr	r6, [r1, #0]
 8001d8e:	bf08      	it	eq
 8001d90:	694b      	ldreq	r3, [r1, #20]
 8001d92:	1bf6      	subs	r6, r6, r7
 8001d94:	600f      	str	r7, [r1, #0]
 8001d96:	608b      	str	r3, [r1, #8]
 8001d98:	2e00      	cmp	r6, #0
 8001d9a:	dd9f      	ble.n	8001cdc <__sflush_r+0x18>
 8001d9c:	4633      	mov	r3, r6
 8001d9e:	463a      	mov	r2, r7
 8001da0:	4628      	mov	r0, r5
 8001da2:	6a21      	ldr	r1, [r4, #32]
 8001da4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001da8:	47e0      	blx	ip
 8001daa:	2800      	cmp	r0, #0
 8001dac:	dc06      	bgt.n	8001dbc <__sflush_r+0xf8>
 8001dae:	89a3      	ldrh	r3, [r4, #12]
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001db8:	81a3      	strh	r3, [r4, #12]
 8001dba:	e790      	b.n	8001cde <__sflush_r+0x1a>
 8001dbc:	4407      	add	r7, r0
 8001dbe:	1a36      	subs	r6, r6, r0
 8001dc0:	e7ea      	b.n	8001d98 <__sflush_r+0xd4>
 8001dc2:	bf00      	nop
 8001dc4:	dfbffffe 	.word	0xdfbffffe

08001dc8 <_fflush_r>:
 8001dc8:	b538      	push	{r3, r4, r5, lr}
 8001dca:	690b      	ldr	r3, [r1, #16]
 8001dcc:	4605      	mov	r5, r0
 8001dce:	460c      	mov	r4, r1
 8001dd0:	b913      	cbnz	r3, 8001dd8 <_fflush_r+0x10>
 8001dd2:	2500      	movs	r5, #0
 8001dd4:	4628      	mov	r0, r5
 8001dd6:	bd38      	pop	{r3, r4, r5, pc}
 8001dd8:	b118      	cbz	r0, 8001de2 <_fflush_r+0x1a>
 8001dda:	6a03      	ldr	r3, [r0, #32]
 8001ddc:	b90b      	cbnz	r3, 8001de2 <_fflush_r+0x1a>
 8001dde:	f000 f8bb 	bl	8001f58 <__sinit>
 8001de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f3      	beq.n	8001dd2 <_fflush_r+0xa>
 8001dea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001dec:	07d0      	lsls	r0, r2, #31
 8001dee:	d404      	bmi.n	8001dfa <_fflush_r+0x32>
 8001df0:	0599      	lsls	r1, r3, #22
 8001df2:	d402      	bmi.n	8001dfa <_fflush_r+0x32>
 8001df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001df6:	f000 f9e8 	bl	80021ca <__retarget_lock_acquire_recursive>
 8001dfa:	4628      	mov	r0, r5
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	f7ff ff61 	bl	8001cc4 <__sflush_r>
 8001e02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e04:	4605      	mov	r5, r0
 8001e06:	07da      	lsls	r2, r3, #31
 8001e08:	d4e4      	bmi.n	8001dd4 <_fflush_r+0xc>
 8001e0a:	89a3      	ldrh	r3, [r4, #12]
 8001e0c:	059b      	lsls	r3, r3, #22
 8001e0e:	d4e1      	bmi.n	8001dd4 <_fflush_r+0xc>
 8001e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e12:	f000 f9db 	bl	80021cc <__retarget_lock_release_recursive>
 8001e16:	e7dd      	b.n	8001dd4 <_fflush_r+0xc>

08001e18 <fflush>:
 8001e18:	4601      	mov	r1, r0
 8001e1a:	b920      	cbnz	r0, 8001e26 <fflush+0xe>
 8001e1c:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <fflush+0x18>)
 8001e1e:	4905      	ldr	r1, [pc, #20]	; (8001e34 <fflush+0x1c>)
 8001e20:	4805      	ldr	r0, [pc, #20]	; (8001e38 <fflush+0x20>)
 8001e22:	f000 b8b1 	b.w	8001f88 <_fwalk_sglue>
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <fflush+0x24>)
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	f7ff bfcd 	b.w	8001dc8 <_fflush_r>
 8001e2e:	bf00      	nop
 8001e30:	2000001c 	.word	0x2000001c
 8001e34:	08001dc9 	.word	0x08001dc9
 8001e38:	20000028 	.word	0x20000028
 8001e3c:	20000074 	.word	0x20000074

08001e40 <std>:
 8001e40:	2300      	movs	r3, #0
 8001e42:	b510      	push	{r4, lr}
 8001e44:	4604      	mov	r4, r0
 8001e46:	e9c0 3300 	strd	r3, r3, [r0]
 8001e4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e4e:	6083      	str	r3, [r0, #8]
 8001e50:	8181      	strh	r1, [r0, #12]
 8001e52:	6643      	str	r3, [r0, #100]	; 0x64
 8001e54:	81c2      	strh	r2, [r0, #14]
 8001e56:	6183      	str	r3, [r0, #24]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	2208      	movs	r2, #8
 8001e5c:	305c      	adds	r0, #92	; 0x5c
 8001e5e:	f000 f93a 	bl	80020d6 <memset>
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <std+0x58>)
 8001e64:	6224      	str	r4, [r4, #32]
 8001e66:	6263      	str	r3, [r4, #36]	; 0x24
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <std+0x5c>)
 8001e6a:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <std+0x60>)
 8001e6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <std+0x64>)
 8001e72:	6323      	str	r3, [r4, #48]	; 0x30
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <std+0x68>)
 8001e76:	429c      	cmp	r4, r3
 8001e78:	d006      	beq.n	8001e88 <std+0x48>
 8001e7a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001e7e:	4294      	cmp	r4, r2
 8001e80:	d002      	beq.n	8001e88 <std+0x48>
 8001e82:	33d0      	adds	r3, #208	; 0xd0
 8001e84:	429c      	cmp	r4, r3
 8001e86:	d105      	bne.n	8001e94 <std+0x54>
 8001e88:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e90:	f000 b99a 	b.w	80021c8 <__retarget_lock_init_recursive>
 8001e94:	bd10      	pop	{r4, pc}
 8001e96:	bf00      	nop
 8001e98:	08002051 	.word	0x08002051
 8001e9c:	08002073 	.word	0x08002073
 8001ea0:	080020ab 	.word	0x080020ab
 8001ea4:	080020cf 	.word	0x080020cf
 8001ea8:	200001d8 	.word	0x200001d8

08001eac <stdio_exit_handler>:
 8001eac:	4a02      	ldr	r2, [pc, #8]	; (8001eb8 <stdio_exit_handler+0xc>)
 8001eae:	4903      	ldr	r1, [pc, #12]	; (8001ebc <stdio_exit_handler+0x10>)
 8001eb0:	4803      	ldr	r0, [pc, #12]	; (8001ec0 <stdio_exit_handler+0x14>)
 8001eb2:	f000 b869 	b.w	8001f88 <_fwalk_sglue>
 8001eb6:	bf00      	nop
 8001eb8:	2000001c 	.word	0x2000001c
 8001ebc:	08001dc9 	.word	0x08001dc9
 8001ec0:	20000028 	.word	0x20000028

08001ec4 <cleanup_stdio>:
 8001ec4:	6841      	ldr	r1, [r0, #4]
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <cleanup_stdio+0x34>)
 8001ec8:	b510      	push	{r4, lr}
 8001eca:	4299      	cmp	r1, r3
 8001ecc:	4604      	mov	r4, r0
 8001ece:	d001      	beq.n	8001ed4 <cleanup_stdio+0x10>
 8001ed0:	f7ff ff7a 	bl	8001dc8 <_fflush_r>
 8001ed4:	68a1      	ldr	r1, [r4, #8]
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <cleanup_stdio+0x38>)
 8001ed8:	4299      	cmp	r1, r3
 8001eda:	d002      	beq.n	8001ee2 <cleanup_stdio+0x1e>
 8001edc:	4620      	mov	r0, r4
 8001ede:	f7ff ff73 	bl	8001dc8 <_fflush_r>
 8001ee2:	68e1      	ldr	r1, [r4, #12]
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <cleanup_stdio+0x3c>)
 8001ee6:	4299      	cmp	r1, r3
 8001ee8:	d004      	beq.n	8001ef4 <cleanup_stdio+0x30>
 8001eea:	4620      	mov	r0, r4
 8001eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ef0:	f7ff bf6a 	b.w	8001dc8 <_fflush_r>
 8001ef4:	bd10      	pop	{r4, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200001d8 	.word	0x200001d8
 8001efc:	20000240 	.word	0x20000240
 8001f00:	200002a8 	.word	0x200002a8

08001f04 <global_stdio_init.part.0>:
 8001f04:	b510      	push	{r4, lr}
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <global_stdio_init.part.0+0x30>)
 8001f08:	4c0b      	ldr	r4, [pc, #44]	; (8001f38 <global_stdio_init.part.0+0x34>)
 8001f0a:	4a0c      	ldr	r2, [pc, #48]	; (8001f3c <global_stdio_init.part.0+0x38>)
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	2104      	movs	r1, #4
 8001f12:	2200      	movs	r2, #0
 8001f14:	f7ff ff94 	bl	8001e40 <std>
 8001f18:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	2109      	movs	r1, #9
 8001f20:	f7ff ff8e 	bl	8001e40 <std>
 8001f24:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001f28:	2202      	movs	r2, #2
 8001f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f2e:	2112      	movs	r1, #18
 8001f30:	f7ff bf86 	b.w	8001e40 <std>
 8001f34:	20000310 	.word	0x20000310
 8001f38:	200001d8 	.word	0x200001d8
 8001f3c:	08001ead 	.word	0x08001ead

08001f40 <__sfp_lock_acquire>:
 8001f40:	4801      	ldr	r0, [pc, #4]	; (8001f48 <__sfp_lock_acquire+0x8>)
 8001f42:	f000 b942 	b.w	80021ca <__retarget_lock_acquire_recursive>
 8001f46:	bf00      	nop
 8001f48:	20000319 	.word	0x20000319

08001f4c <__sfp_lock_release>:
 8001f4c:	4801      	ldr	r0, [pc, #4]	; (8001f54 <__sfp_lock_release+0x8>)
 8001f4e:	f000 b93d 	b.w	80021cc <__retarget_lock_release_recursive>
 8001f52:	bf00      	nop
 8001f54:	20000319 	.word	0x20000319

08001f58 <__sinit>:
 8001f58:	b510      	push	{r4, lr}
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	f7ff fff0 	bl	8001f40 <__sfp_lock_acquire>
 8001f60:	6a23      	ldr	r3, [r4, #32]
 8001f62:	b11b      	cbz	r3, 8001f6c <__sinit+0x14>
 8001f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f68:	f7ff bff0 	b.w	8001f4c <__sfp_lock_release>
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <__sinit+0x28>)
 8001f6e:	6223      	str	r3, [r4, #32]
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <__sinit+0x2c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f5      	bne.n	8001f64 <__sinit+0xc>
 8001f78:	f7ff ffc4 	bl	8001f04 <global_stdio_init.part.0>
 8001f7c:	e7f2      	b.n	8001f64 <__sinit+0xc>
 8001f7e:	bf00      	nop
 8001f80:	08001ec5 	.word	0x08001ec5
 8001f84:	20000310 	.word	0x20000310

08001f88 <_fwalk_sglue>:
 8001f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f8c:	4607      	mov	r7, r0
 8001f8e:	4688      	mov	r8, r1
 8001f90:	4614      	mov	r4, r2
 8001f92:	2600      	movs	r6, #0
 8001f94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001f98:	f1b9 0901 	subs.w	r9, r9, #1
 8001f9c:	d505      	bpl.n	8001faa <_fwalk_sglue+0x22>
 8001f9e:	6824      	ldr	r4, [r4, #0]
 8001fa0:	2c00      	cmp	r4, #0
 8001fa2:	d1f7      	bne.n	8001f94 <_fwalk_sglue+0xc>
 8001fa4:	4630      	mov	r0, r6
 8001fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001faa:	89ab      	ldrh	r3, [r5, #12]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d907      	bls.n	8001fc0 <_fwalk_sglue+0x38>
 8001fb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	d003      	beq.n	8001fc0 <_fwalk_sglue+0x38>
 8001fb8:	4629      	mov	r1, r5
 8001fba:	4638      	mov	r0, r7
 8001fbc:	47c0      	blx	r8
 8001fbe:	4306      	orrs	r6, r0
 8001fc0:	3568      	adds	r5, #104	; 0x68
 8001fc2:	e7e9      	b.n	8001f98 <_fwalk_sglue+0x10>

08001fc4 <iprintf>:
 8001fc4:	b40f      	push	{r0, r1, r2, r3}
 8001fc6:	b507      	push	{r0, r1, r2, lr}
 8001fc8:	4906      	ldr	r1, [pc, #24]	; (8001fe4 <iprintf+0x20>)
 8001fca:	ab04      	add	r3, sp, #16
 8001fcc:	6808      	ldr	r0, [r1, #0]
 8001fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8001fd2:	6881      	ldr	r1, [r0, #8]
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	f000 fb6f 	bl	80026b8 <_vfiprintf_r>
 8001fda:	b003      	add	sp, #12
 8001fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001fe0:	b004      	add	sp, #16
 8001fe2:	4770      	bx	lr
 8001fe4:	20000074 	.word	0x20000074

08001fe8 <sniprintf>:
 8001fe8:	b40c      	push	{r2, r3}
 8001fea:	b530      	push	{r4, r5, lr}
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <sniprintf+0x64>)
 8001fee:	1e0c      	subs	r4, r1, #0
 8001ff0:	681d      	ldr	r5, [r3, #0]
 8001ff2:	b09d      	sub	sp, #116	; 0x74
 8001ff4:	da08      	bge.n	8002008 <sniprintf+0x20>
 8001ff6:	238b      	movs	r3, #139	; 0x8b
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffc:	602b      	str	r3, [r5, #0]
 8001ffe:	b01d      	add	sp, #116	; 0x74
 8002000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002004:	b002      	add	sp, #8
 8002006:	4770      	bx	lr
 8002008:	f44f 7302 	mov.w	r3, #520	; 0x208
 800200c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002010:	bf0c      	ite	eq
 8002012:	4623      	moveq	r3, r4
 8002014:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002018:	9304      	str	r3, [sp, #16]
 800201a:	9307      	str	r3, [sp, #28]
 800201c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002020:	9002      	str	r0, [sp, #8]
 8002022:	9006      	str	r0, [sp, #24]
 8002024:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002028:	4628      	mov	r0, r5
 800202a:	ab21      	add	r3, sp, #132	; 0x84
 800202c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800202e:	a902      	add	r1, sp, #8
 8002030:	9301      	str	r3, [sp, #4]
 8002032:	f000 fa1b 	bl	800246c <_svfiprintf_r>
 8002036:	1c43      	adds	r3, r0, #1
 8002038:	bfbc      	itt	lt
 800203a:	238b      	movlt	r3, #139	; 0x8b
 800203c:	602b      	strlt	r3, [r5, #0]
 800203e:	2c00      	cmp	r4, #0
 8002040:	d0dd      	beq.n	8001ffe <sniprintf+0x16>
 8002042:	2200      	movs	r2, #0
 8002044:	9b02      	ldr	r3, [sp, #8]
 8002046:	701a      	strb	r2, [r3, #0]
 8002048:	e7d9      	b.n	8001ffe <sniprintf+0x16>
 800204a:	bf00      	nop
 800204c:	20000074 	.word	0x20000074

08002050 <__sread>:
 8002050:	b510      	push	{r4, lr}
 8002052:	460c      	mov	r4, r1
 8002054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002058:	f000 f868 	bl	800212c <_read_r>
 800205c:	2800      	cmp	r0, #0
 800205e:	bfab      	itete	ge
 8002060:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002062:	89a3      	ldrhlt	r3, [r4, #12]
 8002064:	181b      	addge	r3, r3, r0
 8002066:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800206a:	bfac      	ite	ge
 800206c:	6563      	strge	r3, [r4, #84]	; 0x54
 800206e:	81a3      	strhlt	r3, [r4, #12]
 8002070:	bd10      	pop	{r4, pc}

08002072 <__swrite>:
 8002072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002076:	461f      	mov	r7, r3
 8002078:	898b      	ldrh	r3, [r1, #12]
 800207a:	4605      	mov	r5, r0
 800207c:	05db      	lsls	r3, r3, #23
 800207e:	460c      	mov	r4, r1
 8002080:	4616      	mov	r6, r2
 8002082:	d505      	bpl.n	8002090 <__swrite+0x1e>
 8002084:	2302      	movs	r3, #2
 8002086:	2200      	movs	r2, #0
 8002088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800208c:	f000 f83c 	bl	8002108 <_lseek_r>
 8002090:	89a3      	ldrh	r3, [r4, #12]
 8002092:	4632      	mov	r2, r6
 8002094:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002098:	81a3      	strh	r3, [r4, #12]
 800209a:	4628      	mov	r0, r5
 800209c:	463b      	mov	r3, r7
 800209e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020a6:	f000 b853 	b.w	8002150 <_write_r>

080020aa <__sseek>:
 80020aa:	b510      	push	{r4, lr}
 80020ac:	460c      	mov	r4, r1
 80020ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020b2:	f000 f829 	bl	8002108 <_lseek_r>
 80020b6:	1c43      	adds	r3, r0, #1
 80020b8:	89a3      	ldrh	r3, [r4, #12]
 80020ba:	bf15      	itete	ne
 80020bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80020be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80020c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80020c6:	81a3      	strheq	r3, [r4, #12]
 80020c8:	bf18      	it	ne
 80020ca:	81a3      	strhne	r3, [r4, #12]
 80020cc:	bd10      	pop	{r4, pc}

080020ce <__sclose>:
 80020ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020d2:	f000 b809 	b.w	80020e8 <_close_r>

080020d6 <memset>:
 80020d6:	4603      	mov	r3, r0
 80020d8:	4402      	add	r2, r0
 80020da:	4293      	cmp	r3, r2
 80020dc:	d100      	bne.n	80020e0 <memset+0xa>
 80020de:	4770      	bx	lr
 80020e0:	f803 1b01 	strb.w	r1, [r3], #1
 80020e4:	e7f9      	b.n	80020da <memset+0x4>
	...

080020e8 <_close_r>:
 80020e8:	b538      	push	{r3, r4, r5, lr}
 80020ea:	2300      	movs	r3, #0
 80020ec:	4d05      	ldr	r5, [pc, #20]	; (8002104 <_close_r+0x1c>)
 80020ee:	4604      	mov	r4, r0
 80020f0:	4608      	mov	r0, r1
 80020f2:	602b      	str	r3, [r5, #0]
 80020f4:	f7ff fc1c 	bl	8001930 <_close>
 80020f8:	1c43      	adds	r3, r0, #1
 80020fa:	d102      	bne.n	8002102 <_close_r+0x1a>
 80020fc:	682b      	ldr	r3, [r5, #0]
 80020fe:	b103      	cbz	r3, 8002102 <_close_r+0x1a>
 8002100:	6023      	str	r3, [r4, #0]
 8002102:	bd38      	pop	{r3, r4, r5, pc}
 8002104:	20000314 	.word	0x20000314

08002108 <_lseek_r>:
 8002108:	b538      	push	{r3, r4, r5, lr}
 800210a:	4604      	mov	r4, r0
 800210c:	4608      	mov	r0, r1
 800210e:	4611      	mov	r1, r2
 8002110:	2200      	movs	r2, #0
 8002112:	4d05      	ldr	r5, [pc, #20]	; (8002128 <_lseek_r+0x20>)
 8002114:	602a      	str	r2, [r5, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	f7ff fbcb 	bl	80018b2 <_lseek>
 800211c:	1c43      	adds	r3, r0, #1
 800211e:	d102      	bne.n	8002126 <_lseek_r+0x1e>
 8002120:	682b      	ldr	r3, [r5, #0]
 8002122:	b103      	cbz	r3, 8002126 <_lseek_r+0x1e>
 8002124:	6023      	str	r3, [r4, #0]
 8002126:	bd38      	pop	{r3, r4, r5, pc}
 8002128:	20000314 	.word	0x20000314

0800212c <_read_r>:
 800212c:	b538      	push	{r3, r4, r5, lr}
 800212e:	4604      	mov	r4, r0
 8002130:	4608      	mov	r0, r1
 8002132:	4611      	mov	r1, r2
 8002134:	2200      	movs	r2, #0
 8002136:	4d05      	ldr	r5, [pc, #20]	; (800214c <_read_r+0x20>)
 8002138:	602a      	str	r2, [r5, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	f7ff fb63 	bl	8001806 <_read>
 8002140:	1c43      	adds	r3, r0, #1
 8002142:	d102      	bne.n	800214a <_read_r+0x1e>
 8002144:	682b      	ldr	r3, [r5, #0]
 8002146:	b103      	cbz	r3, 800214a <_read_r+0x1e>
 8002148:	6023      	str	r3, [r4, #0]
 800214a:	bd38      	pop	{r3, r4, r5, pc}
 800214c:	20000314 	.word	0x20000314

08002150 <_write_r>:
 8002150:	b538      	push	{r3, r4, r5, lr}
 8002152:	4604      	mov	r4, r0
 8002154:	4608      	mov	r0, r1
 8002156:	4611      	mov	r1, r2
 8002158:	2200      	movs	r2, #0
 800215a:	4d05      	ldr	r5, [pc, #20]	; (8002170 <_write_r+0x20>)
 800215c:	602a      	str	r2, [r5, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	f7ff fbb9 	bl	80018d6 <_write>
 8002164:	1c43      	adds	r3, r0, #1
 8002166:	d102      	bne.n	800216e <_write_r+0x1e>
 8002168:	682b      	ldr	r3, [r5, #0]
 800216a:	b103      	cbz	r3, 800216e <_write_r+0x1e>
 800216c:	6023      	str	r3, [r4, #0]
 800216e:	bd38      	pop	{r3, r4, r5, pc}
 8002170:	20000314 	.word	0x20000314

08002174 <__errno>:
 8002174:	4b01      	ldr	r3, [pc, #4]	; (800217c <__errno+0x8>)
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000074 	.word	0x20000074

08002180 <__libc_init_array>:
 8002180:	b570      	push	{r4, r5, r6, lr}
 8002182:	2600      	movs	r6, #0
 8002184:	4d0c      	ldr	r5, [pc, #48]	; (80021b8 <__libc_init_array+0x38>)
 8002186:	4c0d      	ldr	r4, [pc, #52]	; (80021bc <__libc_init_array+0x3c>)
 8002188:	1b64      	subs	r4, r4, r5
 800218a:	10a4      	asrs	r4, r4, #2
 800218c:	42a6      	cmp	r6, r4
 800218e:	d109      	bne.n	80021a4 <__libc_init_array+0x24>
 8002190:	f000 fed6 	bl	8002f40 <_init>
 8002194:	2600      	movs	r6, #0
 8002196:	4d0a      	ldr	r5, [pc, #40]	; (80021c0 <__libc_init_array+0x40>)
 8002198:	4c0a      	ldr	r4, [pc, #40]	; (80021c4 <__libc_init_array+0x44>)
 800219a:	1b64      	subs	r4, r4, r5
 800219c:	10a4      	asrs	r4, r4, #2
 800219e:	42a6      	cmp	r6, r4
 80021a0:	d105      	bne.n	80021ae <__libc_init_array+0x2e>
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
 80021a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80021a8:	4798      	blx	r3
 80021aa:	3601      	adds	r6, #1
 80021ac:	e7ee      	b.n	800218c <__libc_init_array+0xc>
 80021ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80021b2:	4798      	blx	r3
 80021b4:	3601      	adds	r6, #1
 80021b6:	e7f2      	b.n	800219e <__libc_init_array+0x1e>
 80021b8:	08003074 	.word	0x08003074
 80021bc:	08003074 	.word	0x08003074
 80021c0:	08003074 	.word	0x08003074
 80021c4:	08003078 	.word	0x08003078

080021c8 <__retarget_lock_init_recursive>:
 80021c8:	4770      	bx	lr

080021ca <__retarget_lock_acquire_recursive>:
 80021ca:	4770      	bx	lr

080021cc <__retarget_lock_release_recursive>:
 80021cc:	4770      	bx	lr
	...

080021d0 <_free_r>:
 80021d0:	b538      	push	{r3, r4, r5, lr}
 80021d2:	4605      	mov	r5, r0
 80021d4:	2900      	cmp	r1, #0
 80021d6:	d040      	beq.n	800225a <_free_r+0x8a>
 80021d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021dc:	1f0c      	subs	r4, r1, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	bfb8      	it	lt
 80021e2:	18e4      	addlt	r4, r4, r3
 80021e4:	f000 f8dc 	bl	80023a0 <__malloc_lock>
 80021e8:	4a1c      	ldr	r2, [pc, #112]	; (800225c <_free_r+0x8c>)
 80021ea:	6813      	ldr	r3, [r2, #0]
 80021ec:	b933      	cbnz	r3, 80021fc <_free_r+0x2c>
 80021ee:	6063      	str	r3, [r4, #4]
 80021f0:	6014      	str	r4, [r2, #0]
 80021f2:	4628      	mov	r0, r5
 80021f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021f8:	f000 b8d8 	b.w	80023ac <__malloc_unlock>
 80021fc:	42a3      	cmp	r3, r4
 80021fe:	d908      	bls.n	8002212 <_free_r+0x42>
 8002200:	6820      	ldr	r0, [r4, #0]
 8002202:	1821      	adds	r1, r4, r0
 8002204:	428b      	cmp	r3, r1
 8002206:	bf01      	itttt	eq
 8002208:	6819      	ldreq	r1, [r3, #0]
 800220a:	685b      	ldreq	r3, [r3, #4]
 800220c:	1809      	addeq	r1, r1, r0
 800220e:	6021      	streq	r1, [r4, #0]
 8002210:	e7ed      	b.n	80021ee <_free_r+0x1e>
 8002212:	461a      	mov	r2, r3
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	b10b      	cbz	r3, 800221c <_free_r+0x4c>
 8002218:	42a3      	cmp	r3, r4
 800221a:	d9fa      	bls.n	8002212 <_free_r+0x42>
 800221c:	6811      	ldr	r1, [r2, #0]
 800221e:	1850      	adds	r0, r2, r1
 8002220:	42a0      	cmp	r0, r4
 8002222:	d10b      	bne.n	800223c <_free_r+0x6c>
 8002224:	6820      	ldr	r0, [r4, #0]
 8002226:	4401      	add	r1, r0
 8002228:	1850      	adds	r0, r2, r1
 800222a:	4283      	cmp	r3, r0
 800222c:	6011      	str	r1, [r2, #0]
 800222e:	d1e0      	bne.n	80021f2 <_free_r+0x22>
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4408      	add	r0, r1
 8002236:	6010      	str	r0, [r2, #0]
 8002238:	6053      	str	r3, [r2, #4]
 800223a:	e7da      	b.n	80021f2 <_free_r+0x22>
 800223c:	d902      	bls.n	8002244 <_free_r+0x74>
 800223e:	230c      	movs	r3, #12
 8002240:	602b      	str	r3, [r5, #0]
 8002242:	e7d6      	b.n	80021f2 <_free_r+0x22>
 8002244:	6820      	ldr	r0, [r4, #0]
 8002246:	1821      	adds	r1, r4, r0
 8002248:	428b      	cmp	r3, r1
 800224a:	bf01      	itttt	eq
 800224c:	6819      	ldreq	r1, [r3, #0]
 800224e:	685b      	ldreq	r3, [r3, #4]
 8002250:	1809      	addeq	r1, r1, r0
 8002252:	6021      	streq	r1, [r4, #0]
 8002254:	6063      	str	r3, [r4, #4]
 8002256:	6054      	str	r4, [r2, #4]
 8002258:	e7cb      	b.n	80021f2 <_free_r+0x22>
 800225a:	bd38      	pop	{r3, r4, r5, pc}
 800225c:	2000031c 	.word	0x2000031c

08002260 <sbrk_aligned>:
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	4e0e      	ldr	r6, [pc, #56]	; (800229c <sbrk_aligned+0x3c>)
 8002264:	460c      	mov	r4, r1
 8002266:	6831      	ldr	r1, [r6, #0]
 8002268:	4605      	mov	r5, r0
 800226a:	b911      	cbnz	r1, 8002272 <sbrk_aligned+0x12>
 800226c:	f000 fd82 	bl	8002d74 <_sbrk_r>
 8002270:	6030      	str	r0, [r6, #0]
 8002272:	4621      	mov	r1, r4
 8002274:	4628      	mov	r0, r5
 8002276:	f000 fd7d 	bl	8002d74 <_sbrk_r>
 800227a:	1c43      	adds	r3, r0, #1
 800227c:	d00a      	beq.n	8002294 <sbrk_aligned+0x34>
 800227e:	1cc4      	adds	r4, r0, #3
 8002280:	f024 0403 	bic.w	r4, r4, #3
 8002284:	42a0      	cmp	r0, r4
 8002286:	d007      	beq.n	8002298 <sbrk_aligned+0x38>
 8002288:	1a21      	subs	r1, r4, r0
 800228a:	4628      	mov	r0, r5
 800228c:	f000 fd72 	bl	8002d74 <_sbrk_r>
 8002290:	3001      	adds	r0, #1
 8002292:	d101      	bne.n	8002298 <sbrk_aligned+0x38>
 8002294:	f04f 34ff 	mov.w	r4, #4294967295
 8002298:	4620      	mov	r0, r4
 800229a:	bd70      	pop	{r4, r5, r6, pc}
 800229c:	20000320 	.word	0x20000320

080022a0 <_malloc_r>:
 80022a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022a4:	1ccd      	adds	r5, r1, #3
 80022a6:	f025 0503 	bic.w	r5, r5, #3
 80022aa:	3508      	adds	r5, #8
 80022ac:	2d0c      	cmp	r5, #12
 80022ae:	bf38      	it	cc
 80022b0:	250c      	movcc	r5, #12
 80022b2:	2d00      	cmp	r5, #0
 80022b4:	4607      	mov	r7, r0
 80022b6:	db01      	blt.n	80022bc <_malloc_r+0x1c>
 80022b8:	42a9      	cmp	r1, r5
 80022ba:	d905      	bls.n	80022c8 <_malloc_r+0x28>
 80022bc:	230c      	movs	r3, #12
 80022be:	2600      	movs	r6, #0
 80022c0:	603b      	str	r3, [r7, #0]
 80022c2:	4630      	mov	r0, r6
 80022c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800239c <_malloc_r+0xfc>
 80022cc:	f000 f868 	bl	80023a0 <__malloc_lock>
 80022d0:	f8d8 3000 	ldr.w	r3, [r8]
 80022d4:	461c      	mov	r4, r3
 80022d6:	bb5c      	cbnz	r4, 8002330 <_malloc_r+0x90>
 80022d8:	4629      	mov	r1, r5
 80022da:	4638      	mov	r0, r7
 80022dc:	f7ff ffc0 	bl	8002260 <sbrk_aligned>
 80022e0:	1c43      	adds	r3, r0, #1
 80022e2:	4604      	mov	r4, r0
 80022e4:	d155      	bne.n	8002392 <_malloc_r+0xf2>
 80022e6:	f8d8 4000 	ldr.w	r4, [r8]
 80022ea:	4626      	mov	r6, r4
 80022ec:	2e00      	cmp	r6, #0
 80022ee:	d145      	bne.n	800237c <_malloc_r+0xdc>
 80022f0:	2c00      	cmp	r4, #0
 80022f2:	d048      	beq.n	8002386 <_malloc_r+0xe6>
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	4631      	mov	r1, r6
 80022f8:	4638      	mov	r0, r7
 80022fa:	eb04 0903 	add.w	r9, r4, r3
 80022fe:	f000 fd39 	bl	8002d74 <_sbrk_r>
 8002302:	4581      	cmp	r9, r0
 8002304:	d13f      	bne.n	8002386 <_malloc_r+0xe6>
 8002306:	6821      	ldr	r1, [r4, #0]
 8002308:	4638      	mov	r0, r7
 800230a:	1a6d      	subs	r5, r5, r1
 800230c:	4629      	mov	r1, r5
 800230e:	f7ff ffa7 	bl	8002260 <sbrk_aligned>
 8002312:	3001      	adds	r0, #1
 8002314:	d037      	beq.n	8002386 <_malloc_r+0xe6>
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	442b      	add	r3, r5
 800231a:	6023      	str	r3, [r4, #0]
 800231c:	f8d8 3000 	ldr.w	r3, [r8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d038      	beq.n	8002396 <_malloc_r+0xf6>
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	42a2      	cmp	r2, r4
 8002328:	d12b      	bne.n	8002382 <_malloc_r+0xe2>
 800232a:	2200      	movs	r2, #0
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	e00f      	b.n	8002350 <_malloc_r+0xb0>
 8002330:	6822      	ldr	r2, [r4, #0]
 8002332:	1b52      	subs	r2, r2, r5
 8002334:	d41f      	bmi.n	8002376 <_malloc_r+0xd6>
 8002336:	2a0b      	cmp	r2, #11
 8002338:	d917      	bls.n	800236a <_malloc_r+0xca>
 800233a:	1961      	adds	r1, r4, r5
 800233c:	42a3      	cmp	r3, r4
 800233e:	6025      	str	r5, [r4, #0]
 8002340:	bf18      	it	ne
 8002342:	6059      	strne	r1, [r3, #4]
 8002344:	6863      	ldr	r3, [r4, #4]
 8002346:	bf08      	it	eq
 8002348:	f8c8 1000 	streq.w	r1, [r8]
 800234c:	5162      	str	r2, [r4, r5]
 800234e:	604b      	str	r3, [r1, #4]
 8002350:	4638      	mov	r0, r7
 8002352:	f104 060b 	add.w	r6, r4, #11
 8002356:	f000 f829 	bl	80023ac <__malloc_unlock>
 800235a:	f026 0607 	bic.w	r6, r6, #7
 800235e:	1d23      	adds	r3, r4, #4
 8002360:	1af2      	subs	r2, r6, r3
 8002362:	d0ae      	beq.n	80022c2 <_malloc_r+0x22>
 8002364:	1b9b      	subs	r3, r3, r6
 8002366:	50a3      	str	r3, [r4, r2]
 8002368:	e7ab      	b.n	80022c2 <_malloc_r+0x22>
 800236a:	42a3      	cmp	r3, r4
 800236c:	6862      	ldr	r2, [r4, #4]
 800236e:	d1dd      	bne.n	800232c <_malloc_r+0x8c>
 8002370:	f8c8 2000 	str.w	r2, [r8]
 8002374:	e7ec      	b.n	8002350 <_malloc_r+0xb0>
 8002376:	4623      	mov	r3, r4
 8002378:	6864      	ldr	r4, [r4, #4]
 800237a:	e7ac      	b.n	80022d6 <_malloc_r+0x36>
 800237c:	4634      	mov	r4, r6
 800237e:	6876      	ldr	r6, [r6, #4]
 8002380:	e7b4      	b.n	80022ec <_malloc_r+0x4c>
 8002382:	4613      	mov	r3, r2
 8002384:	e7cc      	b.n	8002320 <_malloc_r+0x80>
 8002386:	230c      	movs	r3, #12
 8002388:	4638      	mov	r0, r7
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	f000 f80e 	bl	80023ac <__malloc_unlock>
 8002390:	e797      	b.n	80022c2 <_malloc_r+0x22>
 8002392:	6025      	str	r5, [r4, #0]
 8002394:	e7dc      	b.n	8002350 <_malloc_r+0xb0>
 8002396:	605b      	str	r3, [r3, #4]
 8002398:	deff      	udf	#255	; 0xff
 800239a:	bf00      	nop
 800239c:	2000031c 	.word	0x2000031c

080023a0 <__malloc_lock>:
 80023a0:	4801      	ldr	r0, [pc, #4]	; (80023a8 <__malloc_lock+0x8>)
 80023a2:	f7ff bf12 	b.w	80021ca <__retarget_lock_acquire_recursive>
 80023a6:	bf00      	nop
 80023a8:	20000318 	.word	0x20000318

080023ac <__malloc_unlock>:
 80023ac:	4801      	ldr	r0, [pc, #4]	; (80023b4 <__malloc_unlock+0x8>)
 80023ae:	f7ff bf0d 	b.w	80021cc <__retarget_lock_release_recursive>
 80023b2:	bf00      	nop
 80023b4:	20000318 	.word	0x20000318

080023b8 <__ssputs_r>:
 80023b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023bc:	461f      	mov	r7, r3
 80023be:	688e      	ldr	r6, [r1, #8]
 80023c0:	4682      	mov	sl, r0
 80023c2:	42be      	cmp	r6, r7
 80023c4:	460c      	mov	r4, r1
 80023c6:	4690      	mov	r8, r2
 80023c8:	680b      	ldr	r3, [r1, #0]
 80023ca:	d82c      	bhi.n	8002426 <__ssputs_r+0x6e>
 80023cc:	898a      	ldrh	r2, [r1, #12]
 80023ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80023d2:	d026      	beq.n	8002422 <__ssputs_r+0x6a>
 80023d4:	6965      	ldr	r5, [r4, #20]
 80023d6:	6909      	ldr	r1, [r1, #16]
 80023d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80023dc:	eba3 0901 	sub.w	r9, r3, r1
 80023e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80023e4:	1c7b      	adds	r3, r7, #1
 80023e6:	444b      	add	r3, r9
 80023e8:	106d      	asrs	r5, r5, #1
 80023ea:	429d      	cmp	r5, r3
 80023ec:	bf38      	it	cc
 80023ee:	461d      	movcc	r5, r3
 80023f0:	0553      	lsls	r3, r2, #21
 80023f2:	d527      	bpl.n	8002444 <__ssputs_r+0x8c>
 80023f4:	4629      	mov	r1, r5
 80023f6:	f7ff ff53 	bl	80022a0 <_malloc_r>
 80023fa:	4606      	mov	r6, r0
 80023fc:	b360      	cbz	r0, 8002458 <__ssputs_r+0xa0>
 80023fe:	464a      	mov	r2, r9
 8002400:	6921      	ldr	r1, [r4, #16]
 8002402:	f000 fcd5 	bl	8002db0 <memcpy>
 8002406:	89a3      	ldrh	r3, [r4, #12]
 8002408:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800240c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002410:	81a3      	strh	r3, [r4, #12]
 8002412:	6126      	str	r6, [r4, #16]
 8002414:	444e      	add	r6, r9
 8002416:	6026      	str	r6, [r4, #0]
 8002418:	463e      	mov	r6, r7
 800241a:	6165      	str	r5, [r4, #20]
 800241c:	eba5 0509 	sub.w	r5, r5, r9
 8002420:	60a5      	str	r5, [r4, #8]
 8002422:	42be      	cmp	r6, r7
 8002424:	d900      	bls.n	8002428 <__ssputs_r+0x70>
 8002426:	463e      	mov	r6, r7
 8002428:	4632      	mov	r2, r6
 800242a:	4641      	mov	r1, r8
 800242c:	6820      	ldr	r0, [r4, #0]
 800242e:	f000 fc87 	bl	8002d40 <memmove>
 8002432:	2000      	movs	r0, #0
 8002434:	68a3      	ldr	r3, [r4, #8]
 8002436:	1b9b      	subs	r3, r3, r6
 8002438:	60a3      	str	r3, [r4, #8]
 800243a:	6823      	ldr	r3, [r4, #0]
 800243c:	4433      	add	r3, r6
 800243e:	6023      	str	r3, [r4, #0]
 8002440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002444:	462a      	mov	r2, r5
 8002446:	f000 fcc1 	bl	8002dcc <_realloc_r>
 800244a:	4606      	mov	r6, r0
 800244c:	2800      	cmp	r0, #0
 800244e:	d1e0      	bne.n	8002412 <__ssputs_r+0x5a>
 8002450:	4650      	mov	r0, sl
 8002452:	6921      	ldr	r1, [r4, #16]
 8002454:	f7ff febc 	bl	80021d0 <_free_r>
 8002458:	230c      	movs	r3, #12
 800245a:	f8ca 3000 	str.w	r3, [sl]
 800245e:	89a3      	ldrh	r3, [r4, #12]
 8002460:	f04f 30ff 	mov.w	r0, #4294967295
 8002464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002468:	81a3      	strh	r3, [r4, #12]
 800246a:	e7e9      	b.n	8002440 <__ssputs_r+0x88>

0800246c <_svfiprintf_r>:
 800246c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002470:	4698      	mov	r8, r3
 8002472:	898b      	ldrh	r3, [r1, #12]
 8002474:	4607      	mov	r7, r0
 8002476:	061b      	lsls	r3, r3, #24
 8002478:	460d      	mov	r5, r1
 800247a:	4614      	mov	r4, r2
 800247c:	b09d      	sub	sp, #116	; 0x74
 800247e:	d50e      	bpl.n	800249e <_svfiprintf_r+0x32>
 8002480:	690b      	ldr	r3, [r1, #16]
 8002482:	b963      	cbnz	r3, 800249e <_svfiprintf_r+0x32>
 8002484:	2140      	movs	r1, #64	; 0x40
 8002486:	f7ff ff0b 	bl	80022a0 <_malloc_r>
 800248a:	6028      	str	r0, [r5, #0]
 800248c:	6128      	str	r0, [r5, #16]
 800248e:	b920      	cbnz	r0, 800249a <_svfiprintf_r+0x2e>
 8002490:	230c      	movs	r3, #12
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	e0d0      	b.n	800263c <_svfiprintf_r+0x1d0>
 800249a:	2340      	movs	r3, #64	; 0x40
 800249c:	616b      	str	r3, [r5, #20]
 800249e:	2300      	movs	r3, #0
 80024a0:	9309      	str	r3, [sp, #36]	; 0x24
 80024a2:	2320      	movs	r3, #32
 80024a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80024a8:	2330      	movs	r3, #48	; 0x30
 80024aa:	f04f 0901 	mov.w	r9, #1
 80024ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80024b2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002654 <_svfiprintf_r+0x1e8>
 80024b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80024ba:	4623      	mov	r3, r4
 80024bc:	469a      	mov	sl, r3
 80024be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80024c2:	b10a      	cbz	r2, 80024c8 <_svfiprintf_r+0x5c>
 80024c4:	2a25      	cmp	r2, #37	; 0x25
 80024c6:	d1f9      	bne.n	80024bc <_svfiprintf_r+0x50>
 80024c8:	ebba 0b04 	subs.w	fp, sl, r4
 80024cc:	d00b      	beq.n	80024e6 <_svfiprintf_r+0x7a>
 80024ce:	465b      	mov	r3, fp
 80024d0:	4622      	mov	r2, r4
 80024d2:	4629      	mov	r1, r5
 80024d4:	4638      	mov	r0, r7
 80024d6:	f7ff ff6f 	bl	80023b8 <__ssputs_r>
 80024da:	3001      	adds	r0, #1
 80024dc:	f000 80a9 	beq.w	8002632 <_svfiprintf_r+0x1c6>
 80024e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80024e2:	445a      	add	r2, fp
 80024e4:	9209      	str	r2, [sp, #36]	; 0x24
 80024e6:	f89a 3000 	ldrb.w	r3, [sl]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80a1 	beq.w	8002632 <_svfiprintf_r+0x1c6>
 80024f0:	2300      	movs	r3, #0
 80024f2:	f04f 32ff 	mov.w	r2, #4294967295
 80024f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80024fa:	f10a 0a01 	add.w	sl, sl, #1
 80024fe:	9304      	str	r3, [sp, #16]
 8002500:	9307      	str	r3, [sp, #28]
 8002502:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002506:	931a      	str	r3, [sp, #104]	; 0x68
 8002508:	4654      	mov	r4, sl
 800250a:	2205      	movs	r2, #5
 800250c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002510:	4850      	ldr	r0, [pc, #320]	; (8002654 <_svfiprintf_r+0x1e8>)
 8002512:	f000 fc3f 	bl	8002d94 <memchr>
 8002516:	9a04      	ldr	r2, [sp, #16]
 8002518:	b9d8      	cbnz	r0, 8002552 <_svfiprintf_r+0xe6>
 800251a:	06d0      	lsls	r0, r2, #27
 800251c:	bf44      	itt	mi
 800251e:	2320      	movmi	r3, #32
 8002520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002524:	0711      	lsls	r1, r2, #28
 8002526:	bf44      	itt	mi
 8002528:	232b      	movmi	r3, #43	; 0x2b
 800252a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800252e:	f89a 3000 	ldrb.w	r3, [sl]
 8002532:	2b2a      	cmp	r3, #42	; 0x2a
 8002534:	d015      	beq.n	8002562 <_svfiprintf_r+0xf6>
 8002536:	4654      	mov	r4, sl
 8002538:	2000      	movs	r0, #0
 800253a:	f04f 0c0a 	mov.w	ip, #10
 800253e:	9a07      	ldr	r2, [sp, #28]
 8002540:	4621      	mov	r1, r4
 8002542:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002546:	3b30      	subs	r3, #48	; 0x30
 8002548:	2b09      	cmp	r3, #9
 800254a:	d94d      	bls.n	80025e8 <_svfiprintf_r+0x17c>
 800254c:	b1b0      	cbz	r0, 800257c <_svfiprintf_r+0x110>
 800254e:	9207      	str	r2, [sp, #28]
 8002550:	e014      	b.n	800257c <_svfiprintf_r+0x110>
 8002552:	eba0 0308 	sub.w	r3, r0, r8
 8002556:	fa09 f303 	lsl.w	r3, r9, r3
 800255a:	4313      	orrs	r3, r2
 800255c:	46a2      	mov	sl, r4
 800255e:	9304      	str	r3, [sp, #16]
 8002560:	e7d2      	b.n	8002508 <_svfiprintf_r+0x9c>
 8002562:	9b03      	ldr	r3, [sp, #12]
 8002564:	1d19      	adds	r1, r3, #4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	9103      	str	r1, [sp, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	bfbb      	ittet	lt
 800256e:	425b      	neglt	r3, r3
 8002570:	f042 0202 	orrlt.w	r2, r2, #2
 8002574:	9307      	strge	r3, [sp, #28]
 8002576:	9307      	strlt	r3, [sp, #28]
 8002578:	bfb8      	it	lt
 800257a:	9204      	strlt	r2, [sp, #16]
 800257c:	7823      	ldrb	r3, [r4, #0]
 800257e:	2b2e      	cmp	r3, #46	; 0x2e
 8002580:	d10c      	bne.n	800259c <_svfiprintf_r+0x130>
 8002582:	7863      	ldrb	r3, [r4, #1]
 8002584:	2b2a      	cmp	r3, #42	; 0x2a
 8002586:	d134      	bne.n	80025f2 <_svfiprintf_r+0x186>
 8002588:	9b03      	ldr	r3, [sp, #12]
 800258a:	3402      	adds	r4, #2
 800258c:	1d1a      	adds	r2, r3, #4
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	9203      	str	r2, [sp, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	bfb8      	it	lt
 8002596:	f04f 33ff 	movlt.w	r3, #4294967295
 800259a:	9305      	str	r3, [sp, #20]
 800259c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002658 <_svfiprintf_r+0x1ec>
 80025a0:	2203      	movs	r2, #3
 80025a2:	4650      	mov	r0, sl
 80025a4:	7821      	ldrb	r1, [r4, #0]
 80025a6:	f000 fbf5 	bl	8002d94 <memchr>
 80025aa:	b138      	cbz	r0, 80025bc <_svfiprintf_r+0x150>
 80025ac:	2240      	movs	r2, #64	; 0x40
 80025ae:	9b04      	ldr	r3, [sp, #16]
 80025b0:	eba0 000a 	sub.w	r0, r0, sl
 80025b4:	4082      	lsls	r2, r0
 80025b6:	4313      	orrs	r3, r2
 80025b8:	3401      	adds	r4, #1
 80025ba:	9304      	str	r3, [sp, #16]
 80025bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025c0:	2206      	movs	r2, #6
 80025c2:	4826      	ldr	r0, [pc, #152]	; (800265c <_svfiprintf_r+0x1f0>)
 80025c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80025c8:	f000 fbe4 	bl	8002d94 <memchr>
 80025cc:	2800      	cmp	r0, #0
 80025ce:	d038      	beq.n	8002642 <_svfiprintf_r+0x1d6>
 80025d0:	4b23      	ldr	r3, [pc, #140]	; (8002660 <_svfiprintf_r+0x1f4>)
 80025d2:	bb1b      	cbnz	r3, 800261c <_svfiprintf_r+0x1b0>
 80025d4:	9b03      	ldr	r3, [sp, #12]
 80025d6:	3307      	adds	r3, #7
 80025d8:	f023 0307 	bic.w	r3, r3, #7
 80025dc:	3308      	adds	r3, #8
 80025de:	9303      	str	r3, [sp, #12]
 80025e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025e2:	4433      	add	r3, r6
 80025e4:	9309      	str	r3, [sp, #36]	; 0x24
 80025e6:	e768      	b.n	80024ba <_svfiprintf_r+0x4e>
 80025e8:	460c      	mov	r4, r1
 80025ea:	2001      	movs	r0, #1
 80025ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80025f0:	e7a6      	b.n	8002540 <_svfiprintf_r+0xd4>
 80025f2:	2300      	movs	r3, #0
 80025f4:	f04f 0c0a 	mov.w	ip, #10
 80025f8:	4619      	mov	r1, r3
 80025fa:	3401      	adds	r4, #1
 80025fc:	9305      	str	r3, [sp, #20]
 80025fe:	4620      	mov	r0, r4
 8002600:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002604:	3a30      	subs	r2, #48	; 0x30
 8002606:	2a09      	cmp	r2, #9
 8002608:	d903      	bls.n	8002612 <_svfiprintf_r+0x1a6>
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0c6      	beq.n	800259c <_svfiprintf_r+0x130>
 800260e:	9105      	str	r1, [sp, #20]
 8002610:	e7c4      	b.n	800259c <_svfiprintf_r+0x130>
 8002612:	4604      	mov	r4, r0
 8002614:	2301      	movs	r3, #1
 8002616:	fb0c 2101 	mla	r1, ip, r1, r2
 800261a:	e7f0      	b.n	80025fe <_svfiprintf_r+0x192>
 800261c:	ab03      	add	r3, sp, #12
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	462a      	mov	r2, r5
 8002622:	4638      	mov	r0, r7
 8002624:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <_svfiprintf_r+0x1f8>)
 8002626:	a904      	add	r1, sp, #16
 8002628:	f3af 8000 	nop.w
 800262c:	1c42      	adds	r2, r0, #1
 800262e:	4606      	mov	r6, r0
 8002630:	d1d6      	bne.n	80025e0 <_svfiprintf_r+0x174>
 8002632:	89ab      	ldrh	r3, [r5, #12]
 8002634:	065b      	lsls	r3, r3, #25
 8002636:	f53f af2d 	bmi.w	8002494 <_svfiprintf_r+0x28>
 800263a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800263c:	b01d      	add	sp, #116	; 0x74
 800263e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002642:	ab03      	add	r3, sp, #12
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	462a      	mov	r2, r5
 8002648:	4638      	mov	r0, r7
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <_svfiprintf_r+0x1f8>)
 800264c:	a904      	add	r1, sp, #16
 800264e:	f000 f9bf 	bl	80029d0 <_printf_i>
 8002652:	e7eb      	b.n	800262c <_svfiprintf_r+0x1c0>
 8002654:	0800303e 	.word	0x0800303e
 8002658:	08003044 	.word	0x08003044
 800265c:	08003048 	.word	0x08003048
 8002660:	00000000 	.word	0x00000000
 8002664:	080023b9 	.word	0x080023b9

08002668 <__sfputc_r>:
 8002668:	6893      	ldr	r3, [r2, #8]
 800266a:	b410      	push	{r4}
 800266c:	3b01      	subs	r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	6093      	str	r3, [r2, #8]
 8002672:	da07      	bge.n	8002684 <__sfputc_r+0x1c>
 8002674:	6994      	ldr	r4, [r2, #24]
 8002676:	42a3      	cmp	r3, r4
 8002678:	db01      	blt.n	800267e <__sfputc_r+0x16>
 800267a:	290a      	cmp	r1, #10
 800267c:	d102      	bne.n	8002684 <__sfputc_r+0x1c>
 800267e:	bc10      	pop	{r4}
 8002680:	f000 bac8 	b.w	8002c14 <__swbuf_r>
 8002684:	6813      	ldr	r3, [r2, #0]
 8002686:	1c58      	adds	r0, r3, #1
 8002688:	6010      	str	r0, [r2, #0]
 800268a:	7019      	strb	r1, [r3, #0]
 800268c:	4608      	mov	r0, r1
 800268e:	bc10      	pop	{r4}
 8002690:	4770      	bx	lr

08002692 <__sfputs_r>:
 8002692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002694:	4606      	mov	r6, r0
 8002696:	460f      	mov	r7, r1
 8002698:	4614      	mov	r4, r2
 800269a:	18d5      	adds	r5, r2, r3
 800269c:	42ac      	cmp	r4, r5
 800269e:	d101      	bne.n	80026a4 <__sfputs_r+0x12>
 80026a0:	2000      	movs	r0, #0
 80026a2:	e007      	b.n	80026b4 <__sfputs_r+0x22>
 80026a4:	463a      	mov	r2, r7
 80026a6:	4630      	mov	r0, r6
 80026a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026ac:	f7ff ffdc 	bl	8002668 <__sfputc_r>
 80026b0:	1c43      	adds	r3, r0, #1
 80026b2:	d1f3      	bne.n	800269c <__sfputs_r+0xa>
 80026b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080026b8 <_vfiprintf_r>:
 80026b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026bc:	460d      	mov	r5, r1
 80026be:	4614      	mov	r4, r2
 80026c0:	4698      	mov	r8, r3
 80026c2:	4606      	mov	r6, r0
 80026c4:	b09d      	sub	sp, #116	; 0x74
 80026c6:	b118      	cbz	r0, 80026d0 <_vfiprintf_r+0x18>
 80026c8:	6a03      	ldr	r3, [r0, #32]
 80026ca:	b90b      	cbnz	r3, 80026d0 <_vfiprintf_r+0x18>
 80026cc:	f7ff fc44 	bl	8001f58 <__sinit>
 80026d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80026d2:	07d9      	lsls	r1, r3, #31
 80026d4:	d405      	bmi.n	80026e2 <_vfiprintf_r+0x2a>
 80026d6:	89ab      	ldrh	r3, [r5, #12]
 80026d8:	059a      	lsls	r2, r3, #22
 80026da:	d402      	bmi.n	80026e2 <_vfiprintf_r+0x2a>
 80026dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80026de:	f7ff fd74 	bl	80021ca <__retarget_lock_acquire_recursive>
 80026e2:	89ab      	ldrh	r3, [r5, #12]
 80026e4:	071b      	lsls	r3, r3, #28
 80026e6:	d501      	bpl.n	80026ec <_vfiprintf_r+0x34>
 80026e8:	692b      	ldr	r3, [r5, #16]
 80026ea:	b99b      	cbnz	r3, 8002714 <_vfiprintf_r+0x5c>
 80026ec:	4629      	mov	r1, r5
 80026ee:	4630      	mov	r0, r6
 80026f0:	f000 face 	bl	8002c90 <__swsetup_r>
 80026f4:	b170      	cbz	r0, 8002714 <_vfiprintf_r+0x5c>
 80026f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80026f8:	07dc      	lsls	r4, r3, #31
 80026fa:	d504      	bpl.n	8002706 <_vfiprintf_r+0x4e>
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002700:	b01d      	add	sp, #116	; 0x74
 8002702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002706:	89ab      	ldrh	r3, [r5, #12]
 8002708:	0598      	lsls	r0, r3, #22
 800270a:	d4f7      	bmi.n	80026fc <_vfiprintf_r+0x44>
 800270c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800270e:	f7ff fd5d 	bl	80021cc <__retarget_lock_release_recursive>
 8002712:	e7f3      	b.n	80026fc <_vfiprintf_r+0x44>
 8002714:	2300      	movs	r3, #0
 8002716:	9309      	str	r3, [sp, #36]	; 0x24
 8002718:	2320      	movs	r3, #32
 800271a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800271e:	2330      	movs	r3, #48	; 0x30
 8002720:	f04f 0901 	mov.w	r9, #1
 8002724:	f8cd 800c 	str.w	r8, [sp, #12]
 8002728:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80028d8 <_vfiprintf_r+0x220>
 800272c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002730:	4623      	mov	r3, r4
 8002732:	469a      	mov	sl, r3
 8002734:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002738:	b10a      	cbz	r2, 800273e <_vfiprintf_r+0x86>
 800273a:	2a25      	cmp	r2, #37	; 0x25
 800273c:	d1f9      	bne.n	8002732 <_vfiprintf_r+0x7a>
 800273e:	ebba 0b04 	subs.w	fp, sl, r4
 8002742:	d00b      	beq.n	800275c <_vfiprintf_r+0xa4>
 8002744:	465b      	mov	r3, fp
 8002746:	4622      	mov	r2, r4
 8002748:	4629      	mov	r1, r5
 800274a:	4630      	mov	r0, r6
 800274c:	f7ff ffa1 	bl	8002692 <__sfputs_r>
 8002750:	3001      	adds	r0, #1
 8002752:	f000 80a9 	beq.w	80028a8 <_vfiprintf_r+0x1f0>
 8002756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002758:	445a      	add	r2, fp
 800275a:	9209      	str	r2, [sp, #36]	; 0x24
 800275c:	f89a 3000 	ldrb.w	r3, [sl]
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80a1 	beq.w	80028a8 <_vfiprintf_r+0x1f0>
 8002766:	2300      	movs	r3, #0
 8002768:	f04f 32ff 	mov.w	r2, #4294967295
 800276c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002770:	f10a 0a01 	add.w	sl, sl, #1
 8002774:	9304      	str	r3, [sp, #16]
 8002776:	9307      	str	r3, [sp, #28]
 8002778:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800277c:	931a      	str	r3, [sp, #104]	; 0x68
 800277e:	4654      	mov	r4, sl
 8002780:	2205      	movs	r2, #5
 8002782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002786:	4854      	ldr	r0, [pc, #336]	; (80028d8 <_vfiprintf_r+0x220>)
 8002788:	f000 fb04 	bl	8002d94 <memchr>
 800278c:	9a04      	ldr	r2, [sp, #16]
 800278e:	b9d8      	cbnz	r0, 80027c8 <_vfiprintf_r+0x110>
 8002790:	06d1      	lsls	r1, r2, #27
 8002792:	bf44      	itt	mi
 8002794:	2320      	movmi	r3, #32
 8002796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800279a:	0713      	lsls	r3, r2, #28
 800279c:	bf44      	itt	mi
 800279e:	232b      	movmi	r3, #43	; 0x2b
 80027a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80027a4:	f89a 3000 	ldrb.w	r3, [sl]
 80027a8:	2b2a      	cmp	r3, #42	; 0x2a
 80027aa:	d015      	beq.n	80027d8 <_vfiprintf_r+0x120>
 80027ac:	4654      	mov	r4, sl
 80027ae:	2000      	movs	r0, #0
 80027b0:	f04f 0c0a 	mov.w	ip, #10
 80027b4:	9a07      	ldr	r2, [sp, #28]
 80027b6:	4621      	mov	r1, r4
 80027b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027bc:	3b30      	subs	r3, #48	; 0x30
 80027be:	2b09      	cmp	r3, #9
 80027c0:	d94d      	bls.n	800285e <_vfiprintf_r+0x1a6>
 80027c2:	b1b0      	cbz	r0, 80027f2 <_vfiprintf_r+0x13a>
 80027c4:	9207      	str	r2, [sp, #28]
 80027c6:	e014      	b.n	80027f2 <_vfiprintf_r+0x13a>
 80027c8:	eba0 0308 	sub.w	r3, r0, r8
 80027cc:	fa09 f303 	lsl.w	r3, r9, r3
 80027d0:	4313      	orrs	r3, r2
 80027d2:	46a2      	mov	sl, r4
 80027d4:	9304      	str	r3, [sp, #16]
 80027d6:	e7d2      	b.n	800277e <_vfiprintf_r+0xc6>
 80027d8:	9b03      	ldr	r3, [sp, #12]
 80027da:	1d19      	adds	r1, r3, #4
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	9103      	str	r1, [sp, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bfbb      	ittet	lt
 80027e4:	425b      	neglt	r3, r3
 80027e6:	f042 0202 	orrlt.w	r2, r2, #2
 80027ea:	9307      	strge	r3, [sp, #28]
 80027ec:	9307      	strlt	r3, [sp, #28]
 80027ee:	bfb8      	it	lt
 80027f0:	9204      	strlt	r2, [sp, #16]
 80027f2:	7823      	ldrb	r3, [r4, #0]
 80027f4:	2b2e      	cmp	r3, #46	; 0x2e
 80027f6:	d10c      	bne.n	8002812 <_vfiprintf_r+0x15a>
 80027f8:	7863      	ldrb	r3, [r4, #1]
 80027fa:	2b2a      	cmp	r3, #42	; 0x2a
 80027fc:	d134      	bne.n	8002868 <_vfiprintf_r+0x1b0>
 80027fe:	9b03      	ldr	r3, [sp, #12]
 8002800:	3402      	adds	r4, #2
 8002802:	1d1a      	adds	r2, r3, #4
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	9203      	str	r2, [sp, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	bfb8      	it	lt
 800280c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002810:	9305      	str	r3, [sp, #20]
 8002812:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80028dc <_vfiprintf_r+0x224>
 8002816:	2203      	movs	r2, #3
 8002818:	4650      	mov	r0, sl
 800281a:	7821      	ldrb	r1, [r4, #0]
 800281c:	f000 faba 	bl	8002d94 <memchr>
 8002820:	b138      	cbz	r0, 8002832 <_vfiprintf_r+0x17a>
 8002822:	2240      	movs	r2, #64	; 0x40
 8002824:	9b04      	ldr	r3, [sp, #16]
 8002826:	eba0 000a 	sub.w	r0, r0, sl
 800282a:	4082      	lsls	r2, r0
 800282c:	4313      	orrs	r3, r2
 800282e:	3401      	adds	r4, #1
 8002830:	9304      	str	r3, [sp, #16]
 8002832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002836:	2206      	movs	r2, #6
 8002838:	4829      	ldr	r0, [pc, #164]	; (80028e0 <_vfiprintf_r+0x228>)
 800283a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800283e:	f000 faa9 	bl	8002d94 <memchr>
 8002842:	2800      	cmp	r0, #0
 8002844:	d03f      	beq.n	80028c6 <_vfiprintf_r+0x20e>
 8002846:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <_vfiprintf_r+0x22c>)
 8002848:	bb1b      	cbnz	r3, 8002892 <_vfiprintf_r+0x1da>
 800284a:	9b03      	ldr	r3, [sp, #12]
 800284c:	3307      	adds	r3, #7
 800284e:	f023 0307 	bic.w	r3, r3, #7
 8002852:	3308      	adds	r3, #8
 8002854:	9303      	str	r3, [sp, #12]
 8002856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002858:	443b      	add	r3, r7
 800285a:	9309      	str	r3, [sp, #36]	; 0x24
 800285c:	e768      	b.n	8002730 <_vfiprintf_r+0x78>
 800285e:	460c      	mov	r4, r1
 8002860:	2001      	movs	r0, #1
 8002862:	fb0c 3202 	mla	r2, ip, r2, r3
 8002866:	e7a6      	b.n	80027b6 <_vfiprintf_r+0xfe>
 8002868:	2300      	movs	r3, #0
 800286a:	f04f 0c0a 	mov.w	ip, #10
 800286e:	4619      	mov	r1, r3
 8002870:	3401      	adds	r4, #1
 8002872:	9305      	str	r3, [sp, #20]
 8002874:	4620      	mov	r0, r4
 8002876:	f810 2b01 	ldrb.w	r2, [r0], #1
 800287a:	3a30      	subs	r2, #48	; 0x30
 800287c:	2a09      	cmp	r2, #9
 800287e:	d903      	bls.n	8002888 <_vfiprintf_r+0x1d0>
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0c6      	beq.n	8002812 <_vfiprintf_r+0x15a>
 8002884:	9105      	str	r1, [sp, #20]
 8002886:	e7c4      	b.n	8002812 <_vfiprintf_r+0x15a>
 8002888:	4604      	mov	r4, r0
 800288a:	2301      	movs	r3, #1
 800288c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002890:	e7f0      	b.n	8002874 <_vfiprintf_r+0x1bc>
 8002892:	ab03      	add	r3, sp, #12
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	462a      	mov	r2, r5
 8002898:	4630      	mov	r0, r6
 800289a:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <_vfiprintf_r+0x230>)
 800289c:	a904      	add	r1, sp, #16
 800289e:	f3af 8000 	nop.w
 80028a2:	4607      	mov	r7, r0
 80028a4:	1c78      	adds	r0, r7, #1
 80028a6:	d1d6      	bne.n	8002856 <_vfiprintf_r+0x19e>
 80028a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028aa:	07d9      	lsls	r1, r3, #31
 80028ac:	d405      	bmi.n	80028ba <_vfiprintf_r+0x202>
 80028ae:	89ab      	ldrh	r3, [r5, #12]
 80028b0:	059a      	lsls	r2, r3, #22
 80028b2:	d402      	bmi.n	80028ba <_vfiprintf_r+0x202>
 80028b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028b6:	f7ff fc89 	bl	80021cc <__retarget_lock_release_recursive>
 80028ba:	89ab      	ldrh	r3, [r5, #12]
 80028bc:	065b      	lsls	r3, r3, #25
 80028be:	f53f af1d 	bmi.w	80026fc <_vfiprintf_r+0x44>
 80028c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80028c4:	e71c      	b.n	8002700 <_vfiprintf_r+0x48>
 80028c6:	ab03      	add	r3, sp, #12
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	462a      	mov	r2, r5
 80028cc:	4630      	mov	r0, r6
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <_vfiprintf_r+0x230>)
 80028d0:	a904      	add	r1, sp, #16
 80028d2:	f000 f87d 	bl	80029d0 <_printf_i>
 80028d6:	e7e4      	b.n	80028a2 <_vfiprintf_r+0x1ea>
 80028d8:	0800303e 	.word	0x0800303e
 80028dc:	08003044 	.word	0x08003044
 80028e0:	08003048 	.word	0x08003048
 80028e4:	00000000 	.word	0x00000000
 80028e8:	08002693 	.word	0x08002693

080028ec <_printf_common>:
 80028ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028f0:	4616      	mov	r6, r2
 80028f2:	4699      	mov	r9, r3
 80028f4:	688a      	ldr	r2, [r1, #8]
 80028f6:	690b      	ldr	r3, [r1, #16]
 80028f8:	4607      	mov	r7, r0
 80028fa:	4293      	cmp	r3, r2
 80028fc:	bfb8      	it	lt
 80028fe:	4613      	movlt	r3, r2
 8002900:	6033      	str	r3, [r6, #0]
 8002902:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002906:	460c      	mov	r4, r1
 8002908:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800290c:	b10a      	cbz	r2, 8002912 <_printf_common+0x26>
 800290e:	3301      	adds	r3, #1
 8002910:	6033      	str	r3, [r6, #0]
 8002912:	6823      	ldr	r3, [r4, #0]
 8002914:	0699      	lsls	r1, r3, #26
 8002916:	bf42      	ittt	mi
 8002918:	6833      	ldrmi	r3, [r6, #0]
 800291a:	3302      	addmi	r3, #2
 800291c:	6033      	strmi	r3, [r6, #0]
 800291e:	6825      	ldr	r5, [r4, #0]
 8002920:	f015 0506 	ands.w	r5, r5, #6
 8002924:	d106      	bne.n	8002934 <_printf_common+0x48>
 8002926:	f104 0a19 	add.w	sl, r4, #25
 800292a:	68e3      	ldr	r3, [r4, #12]
 800292c:	6832      	ldr	r2, [r6, #0]
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	42ab      	cmp	r3, r5
 8002932:	dc2b      	bgt.n	800298c <_printf_common+0xa0>
 8002934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002938:	1e13      	subs	r3, r2, #0
 800293a:	6822      	ldr	r2, [r4, #0]
 800293c:	bf18      	it	ne
 800293e:	2301      	movne	r3, #1
 8002940:	0692      	lsls	r2, r2, #26
 8002942:	d430      	bmi.n	80029a6 <_printf_common+0xba>
 8002944:	4649      	mov	r1, r9
 8002946:	4638      	mov	r0, r7
 8002948:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800294c:	47c0      	blx	r8
 800294e:	3001      	adds	r0, #1
 8002950:	d023      	beq.n	800299a <_printf_common+0xae>
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	6922      	ldr	r2, [r4, #16]
 8002956:	f003 0306 	and.w	r3, r3, #6
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf14      	ite	ne
 800295e:	2500      	movne	r5, #0
 8002960:	6833      	ldreq	r3, [r6, #0]
 8002962:	f04f 0600 	mov.w	r6, #0
 8002966:	bf08      	it	eq
 8002968:	68e5      	ldreq	r5, [r4, #12]
 800296a:	f104 041a 	add.w	r4, r4, #26
 800296e:	bf08      	it	eq
 8002970:	1aed      	subeq	r5, r5, r3
 8002972:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002976:	bf08      	it	eq
 8002978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800297c:	4293      	cmp	r3, r2
 800297e:	bfc4      	itt	gt
 8002980:	1a9b      	subgt	r3, r3, r2
 8002982:	18ed      	addgt	r5, r5, r3
 8002984:	42b5      	cmp	r5, r6
 8002986:	d11a      	bne.n	80029be <_printf_common+0xd2>
 8002988:	2000      	movs	r0, #0
 800298a:	e008      	b.n	800299e <_printf_common+0xb2>
 800298c:	2301      	movs	r3, #1
 800298e:	4652      	mov	r2, sl
 8002990:	4649      	mov	r1, r9
 8002992:	4638      	mov	r0, r7
 8002994:	47c0      	blx	r8
 8002996:	3001      	adds	r0, #1
 8002998:	d103      	bne.n	80029a2 <_printf_common+0xb6>
 800299a:	f04f 30ff 	mov.w	r0, #4294967295
 800299e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029a2:	3501      	adds	r5, #1
 80029a4:	e7c1      	b.n	800292a <_printf_common+0x3e>
 80029a6:	2030      	movs	r0, #48	; 0x30
 80029a8:	18e1      	adds	r1, r4, r3
 80029aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80029b4:	4422      	add	r2, r4
 80029b6:	3302      	adds	r3, #2
 80029b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80029bc:	e7c2      	b.n	8002944 <_printf_common+0x58>
 80029be:	2301      	movs	r3, #1
 80029c0:	4622      	mov	r2, r4
 80029c2:	4649      	mov	r1, r9
 80029c4:	4638      	mov	r0, r7
 80029c6:	47c0      	blx	r8
 80029c8:	3001      	adds	r0, #1
 80029ca:	d0e6      	beq.n	800299a <_printf_common+0xae>
 80029cc:	3601      	adds	r6, #1
 80029ce:	e7d9      	b.n	8002984 <_printf_common+0x98>

080029d0 <_printf_i>:
 80029d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029d4:	7e0f      	ldrb	r7, [r1, #24]
 80029d6:	4691      	mov	r9, r2
 80029d8:	2f78      	cmp	r7, #120	; 0x78
 80029da:	4680      	mov	r8, r0
 80029dc:	460c      	mov	r4, r1
 80029de:	469a      	mov	sl, r3
 80029e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80029e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80029e6:	d807      	bhi.n	80029f8 <_printf_i+0x28>
 80029e8:	2f62      	cmp	r7, #98	; 0x62
 80029ea:	d80a      	bhi.n	8002a02 <_printf_i+0x32>
 80029ec:	2f00      	cmp	r7, #0
 80029ee:	f000 80d5 	beq.w	8002b9c <_printf_i+0x1cc>
 80029f2:	2f58      	cmp	r7, #88	; 0x58
 80029f4:	f000 80c1 	beq.w	8002b7a <_printf_i+0x1aa>
 80029f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a00:	e03a      	b.n	8002a78 <_printf_i+0xa8>
 8002a02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a06:	2b15      	cmp	r3, #21
 8002a08:	d8f6      	bhi.n	80029f8 <_printf_i+0x28>
 8002a0a:	a101      	add	r1, pc, #4	; (adr r1, 8002a10 <_printf_i+0x40>)
 8002a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a10:	08002a69 	.word	0x08002a69
 8002a14:	08002a7d 	.word	0x08002a7d
 8002a18:	080029f9 	.word	0x080029f9
 8002a1c:	080029f9 	.word	0x080029f9
 8002a20:	080029f9 	.word	0x080029f9
 8002a24:	080029f9 	.word	0x080029f9
 8002a28:	08002a7d 	.word	0x08002a7d
 8002a2c:	080029f9 	.word	0x080029f9
 8002a30:	080029f9 	.word	0x080029f9
 8002a34:	080029f9 	.word	0x080029f9
 8002a38:	080029f9 	.word	0x080029f9
 8002a3c:	08002b83 	.word	0x08002b83
 8002a40:	08002aa9 	.word	0x08002aa9
 8002a44:	08002b3d 	.word	0x08002b3d
 8002a48:	080029f9 	.word	0x080029f9
 8002a4c:	080029f9 	.word	0x080029f9
 8002a50:	08002ba5 	.word	0x08002ba5
 8002a54:	080029f9 	.word	0x080029f9
 8002a58:	08002aa9 	.word	0x08002aa9
 8002a5c:	080029f9 	.word	0x080029f9
 8002a60:	080029f9 	.word	0x080029f9
 8002a64:	08002b45 	.word	0x08002b45
 8002a68:	682b      	ldr	r3, [r5, #0]
 8002a6a:	1d1a      	adds	r2, r3, #4
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	602a      	str	r2, [r5, #0]
 8002a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0a0      	b.n	8002bbe <_printf_i+0x1ee>
 8002a7c:	6820      	ldr	r0, [r4, #0]
 8002a7e:	682b      	ldr	r3, [r5, #0]
 8002a80:	0607      	lsls	r7, r0, #24
 8002a82:	f103 0104 	add.w	r1, r3, #4
 8002a86:	6029      	str	r1, [r5, #0]
 8002a88:	d501      	bpl.n	8002a8e <_printf_i+0xbe>
 8002a8a:	681e      	ldr	r6, [r3, #0]
 8002a8c:	e003      	b.n	8002a96 <_printf_i+0xc6>
 8002a8e:	0646      	lsls	r6, r0, #25
 8002a90:	d5fb      	bpl.n	8002a8a <_printf_i+0xba>
 8002a92:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002a96:	2e00      	cmp	r6, #0
 8002a98:	da03      	bge.n	8002aa2 <_printf_i+0xd2>
 8002a9a:	232d      	movs	r3, #45	; 0x2d
 8002a9c:	4276      	negs	r6, r6
 8002a9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002aa2:	230a      	movs	r3, #10
 8002aa4:	4859      	ldr	r0, [pc, #356]	; (8002c0c <_printf_i+0x23c>)
 8002aa6:	e012      	b.n	8002ace <_printf_i+0xfe>
 8002aa8:	682b      	ldr	r3, [r5, #0]
 8002aaa:	6820      	ldr	r0, [r4, #0]
 8002aac:	1d19      	adds	r1, r3, #4
 8002aae:	6029      	str	r1, [r5, #0]
 8002ab0:	0605      	lsls	r5, r0, #24
 8002ab2:	d501      	bpl.n	8002ab8 <_printf_i+0xe8>
 8002ab4:	681e      	ldr	r6, [r3, #0]
 8002ab6:	e002      	b.n	8002abe <_printf_i+0xee>
 8002ab8:	0641      	lsls	r1, r0, #25
 8002aba:	d5fb      	bpl.n	8002ab4 <_printf_i+0xe4>
 8002abc:	881e      	ldrh	r6, [r3, #0]
 8002abe:	2f6f      	cmp	r7, #111	; 0x6f
 8002ac0:	bf0c      	ite	eq
 8002ac2:	2308      	moveq	r3, #8
 8002ac4:	230a      	movne	r3, #10
 8002ac6:	4851      	ldr	r0, [pc, #324]	; (8002c0c <_printf_i+0x23c>)
 8002ac8:	2100      	movs	r1, #0
 8002aca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ace:	6865      	ldr	r5, [r4, #4]
 8002ad0:	2d00      	cmp	r5, #0
 8002ad2:	bfa8      	it	ge
 8002ad4:	6821      	ldrge	r1, [r4, #0]
 8002ad6:	60a5      	str	r5, [r4, #8]
 8002ad8:	bfa4      	itt	ge
 8002ada:	f021 0104 	bicge.w	r1, r1, #4
 8002ade:	6021      	strge	r1, [r4, #0]
 8002ae0:	b90e      	cbnz	r6, 8002ae6 <_printf_i+0x116>
 8002ae2:	2d00      	cmp	r5, #0
 8002ae4:	d04b      	beq.n	8002b7e <_printf_i+0x1ae>
 8002ae6:	4615      	mov	r5, r2
 8002ae8:	fbb6 f1f3 	udiv	r1, r6, r3
 8002aec:	fb03 6711 	mls	r7, r3, r1, r6
 8002af0:	5dc7      	ldrb	r7, [r0, r7]
 8002af2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002af6:	4637      	mov	r7, r6
 8002af8:	42bb      	cmp	r3, r7
 8002afa:	460e      	mov	r6, r1
 8002afc:	d9f4      	bls.n	8002ae8 <_printf_i+0x118>
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d10b      	bne.n	8002b1a <_printf_i+0x14a>
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	07de      	lsls	r6, r3, #31
 8002b06:	d508      	bpl.n	8002b1a <_printf_i+0x14a>
 8002b08:	6923      	ldr	r3, [r4, #16]
 8002b0a:	6861      	ldr	r1, [r4, #4]
 8002b0c:	4299      	cmp	r1, r3
 8002b0e:	bfde      	ittt	le
 8002b10:	2330      	movle	r3, #48	; 0x30
 8002b12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b16:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b1a:	1b52      	subs	r2, r2, r5
 8002b1c:	6122      	str	r2, [r4, #16]
 8002b1e:	464b      	mov	r3, r9
 8002b20:	4621      	mov	r1, r4
 8002b22:	4640      	mov	r0, r8
 8002b24:	f8cd a000 	str.w	sl, [sp]
 8002b28:	aa03      	add	r2, sp, #12
 8002b2a:	f7ff fedf 	bl	80028ec <_printf_common>
 8002b2e:	3001      	adds	r0, #1
 8002b30:	d14a      	bne.n	8002bc8 <_printf_i+0x1f8>
 8002b32:	f04f 30ff 	mov.w	r0, #4294967295
 8002b36:	b004      	add	sp, #16
 8002b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	f043 0320 	orr.w	r3, r3, #32
 8002b42:	6023      	str	r3, [r4, #0]
 8002b44:	2778      	movs	r7, #120	; 0x78
 8002b46:	4832      	ldr	r0, [pc, #200]	; (8002c10 <_printf_i+0x240>)
 8002b48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	6829      	ldr	r1, [r5, #0]
 8002b50:	061f      	lsls	r7, r3, #24
 8002b52:	f851 6b04 	ldr.w	r6, [r1], #4
 8002b56:	d402      	bmi.n	8002b5e <_printf_i+0x18e>
 8002b58:	065f      	lsls	r7, r3, #25
 8002b5a:	bf48      	it	mi
 8002b5c:	b2b6      	uxthmi	r6, r6
 8002b5e:	07df      	lsls	r7, r3, #31
 8002b60:	bf48      	it	mi
 8002b62:	f043 0320 	orrmi.w	r3, r3, #32
 8002b66:	6029      	str	r1, [r5, #0]
 8002b68:	bf48      	it	mi
 8002b6a:	6023      	strmi	r3, [r4, #0]
 8002b6c:	b91e      	cbnz	r6, 8002b76 <_printf_i+0x1a6>
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	f023 0320 	bic.w	r3, r3, #32
 8002b74:	6023      	str	r3, [r4, #0]
 8002b76:	2310      	movs	r3, #16
 8002b78:	e7a6      	b.n	8002ac8 <_printf_i+0xf8>
 8002b7a:	4824      	ldr	r0, [pc, #144]	; (8002c0c <_printf_i+0x23c>)
 8002b7c:	e7e4      	b.n	8002b48 <_printf_i+0x178>
 8002b7e:	4615      	mov	r5, r2
 8002b80:	e7bd      	b.n	8002afe <_printf_i+0x12e>
 8002b82:	682b      	ldr	r3, [r5, #0]
 8002b84:	6826      	ldr	r6, [r4, #0]
 8002b86:	1d18      	adds	r0, r3, #4
 8002b88:	6961      	ldr	r1, [r4, #20]
 8002b8a:	6028      	str	r0, [r5, #0]
 8002b8c:	0635      	lsls	r5, r6, #24
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	d501      	bpl.n	8002b96 <_printf_i+0x1c6>
 8002b92:	6019      	str	r1, [r3, #0]
 8002b94:	e002      	b.n	8002b9c <_printf_i+0x1cc>
 8002b96:	0670      	lsls	r0, r6, #25
 8002b98:	d5fb      	bpl.n	8002b92 <_printf_i+0x1c2>
 8002b9a:	8019      	strh	r1, [r3, #0]
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	4615      	mov	r5, r2
 8002ba0:	6123      	str	r3, [r4, #16]
 8002ba2:	e7bc      	b.n	8002b1e <_printf_i+0x14e>
 8002ba4:	682b      	ldr	r3, [r5, #0]
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	1d1a      	adds	r2, r3, #4
 8002baa:	602a      	str	r2, [r5, #0]
 8002bac:	681d      	ldr	r5, [r3, #0]
 8002bae:	6862      	ldr	r2, [r4, #4]
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	f000 f8ef 	bl	8002d94 <memchr>
 8002bb6:	b108      	cbz	r0, 8002bbc <_printf_i+0x1ec>
 8002bb8:	1b40      	subs	r0, r0, r5
 8002bba:	6060      	str	r0, [r4, #4]
 8002bbc:	6863      	ldr	r3, [r4, #4]
 8002bbe:	6123      	str	r3, [r4, #16]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bc6:	e7aa      	b.n	8002b1e <_printf_i+0x14e>
 8002bc8:	462a      	mov	r2, r5
 8002bca:	4649      	mov	r1, r9
 8002bcc:	4640      	mov	r0, r8
 8002bce:	6923      	ldr	r3, [r4, #16]
 8002bd0:	47d0      	blx	sl
 8002bd2:	3001      	adds	r0, #1
 8002bd4:	d0ad      	beq.n	8002b32 <_printf_i+0x162>
 8002bd6:	6823      	ldr	r3, [r4, #0]
 8002bd8:	079b      	lsls	r3, r3, #30
 8002bda:	d413      	bmi.n	8002c04 <_printf_i+0x234>
 8002bdc:	68e0      	ldr	r0, [r4, #12]
 8002bde:	9b03      	ldr	r3, [sp, #12]
 8002be0:	4298      	cmp	r0, r3
 8002be2:	bfb8      	it	lt
 8002be4:	4618      	movlt	r0, r3
 8002be6:	e7a6      	b.n	8002b36 <_printf_i+0x166>
 8002be8:	2301      	movs	r3, #1
 8002bea:	4632      	mov	r2, r6
 8002bec:	4649      	mov	r1, r9
 8002bee:	4640      	mov	r0, r8
 8002bf0:	47d0      	blx	sl
 8002bf2:	3001      	adds	r0, #1
 8002bf4:	d09d      	beq.n	8002b32 <_printf_i+0x162>
 8002bf6:	3501      	adds	r5, #1
 8002bf8:	68e3      	ldr	r3, [r4, #12]
 8002bfa:	9903      	ldr	r1, [sp, #12]
 8002bfc:	1a5b      	subs	r3, r3, r1
 8002bfe:	42ab      	cmp	r3, r5
 8002c00:	dcf2      	bgt.n	8002be8 <_printf_i+0x218>
 8002c02:	e7eb      	b.n	8002bdc <_printf_i+0x20c>
 8002c04:	2500      	movs	r5, #0
 8002c06:	f104 0619 	add.w	r6, r4, #25
 8002c0a:	e7f5      	b.n	8002bf8 <_printf_i+0x228>
 8002c0c:	0800304f 	.word	0x0800304f
 8002c10:	08003060 	.word	0x08003060

08002c14 <__swbuf_r>:
 8002c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c16:	460e      	mov	r6, r1
 8002c18:	4614      	mov	r4, r2
 8002c1a:	4605      	mov	r5, r0
 8002c1c:	b118      	cbz	r0, 8002c26 <__swbuf_r+0x12>
 8002c1e:	6a03      	ldr	r3, [r0, #32]
 8002c20:	b90b      	cbnz	r3, 8002c26 <__swbuf_r+0x12>
 8002c22:	f7ff f999 	bl	8001f58 <__sinit>
 8002c26:	69a3      	ldr	r3, [r4, #24]
 8002c28:	60a3      	str	r3, [r4, #8]
 8002c2a:	89a3      	ldrh	r3, [r4, #12]
 8002c2c:	071a      	lsls	r2, r3, #28
 8002c2e:	d525      	bpl.n	8002c7c <__swbuf_r+0x68>
 8002c30:	6923      	ldr	r3, [r4, #16]
 8002c32:	b31b      	cbz	r3, 8002c7c <__swbuf_r+0x68>
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	6922      	ldr	r2, [r4, #16]
 8002c38:	b2f6      	uxtb	r6, r6
 8002c3a:	1a98      	subs	r0, r3, r2
 8002c3c:	6963      	ldr	r3, [r4, #20]
 8002c3e:	4637      	mov	r7, r6
 8002c40:	4283      	cmp	r3, r0
 8002c42:	dc04      	bgt.n	8002c4e <__swbuf_r+0x3a>
 8002c44:	4621      	mov	r1, r4
 8002c46:	4628      	mov	r0, r5
 8002c48:	f7ff f8be 	bl	8001dc8 <_fflush_r>
 8002c4c:	b9e0      	cbnz	r0, 8002c88 <__swbuf_r+0x74>
 8002c4e:	68a3      	ldr	r3, [r4, #8]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	60a3      	str	r3, [r4, #8]
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	6022      	str	r2, [r4, #0]
 8002c5a:	701e      	strb	r6, [r3, #0]
 8002c5c:	6962      	ldr	r2, [r4, #20]
 8002c5e:	1c43      	adds	r3, r0, #1
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d004      	beq.n	8002c6e <__swbuf_r+0x5a>
 8002c64:	89a3      	ldrh	r3, [r4, #12]
 8002c66:	07db      	lsls	r3, r3, #31
 8002c68:	d506      	bpl.n	8002c78 <__swbuf_r+0x64>
 8002c6a:	2e0a      	cmp	r6, #10
 8002c6c:	d104      	bne.n	8002c78 <__swbuf_r+0x64>
 8002c6e:	4621      	mov	r1, r4
 8002c70:	4628      	mov	r0, r5
 8002c72:	f7ff f8a9 	bl	8001dc8 <_fflush_r>
 8002c76:	b938      	cbnz	r0, 8002c88 <__swbuf_r+0x74>
 8002c78:	4638      	mov	r0, r7
 8002c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c7c:	4621      	mov	r1, r4
 8002c7e:	4628      	mov	r0, r5
 8002c80:	f000 f806 	bl	8002c90 <__swsetup_r>
 8002c84:	2800      	cmp	r0, #0
 8002c86:	d0d5      	beq.n	8002c34 <__swbuf_r+0x20>
 8002c88:	f04f 37ff 	mov.w	r7, #4294967295
 8002c8c:	e7f4      	b.n	8002c78 <__swbuf_r+0x64>
	...

08002c90 <__swsetup_r>:
 8002c90:	b538      	push	{r3, r4, r5, lr}
 8002c92:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <__swsetup_r+0xac>)
 8002c94:	4605      	mov	r5, r0
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	460c      	mov	r4, r1
 8002c9a:	b118      	cbz	r0, 8002ca4 <__swsetup_r+0x14>
 8002c9c:	6a03      	ldr	r3, [r0, #32]
 8002c9e:	b90b      	cbnz	r3, 8002ca4 <__swsetup_r+0x14>
 8002ca0:	f7ff f95a 	bl	8001f58 <__sinit>
 8002ca4:	89a3      	ldrh	r3, [r4, #12]
 8002ca6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002caa:	0718      	lsls	r0, r3, #28
 8002cac:	d422      	bmi.n	8002cf4 <__swsetup_r+0x64>
 8002cae:	06d9      	lsls	r1, r3, #27
 8002cb0:	d407      	bmi.n	8002cc2 <__swsetup_r+0x32>
 8002cb2:	2309      	movs	r3, #9
 8002cb4:	602b      	str	r3, [r5, #0]
 8002cb6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002cba:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbe:	81a3      	strh	r3, [r4, #12]
 8002cc0:	e034      	b.n	8002d2c <__swsetup_r+0x9c>
 8002cc2:	0758      	lsls	r0, r3, #29
 8002cc4:	d512      	bpl.n	8002cec <__swsetup_r+0x5c>
 8002cc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002cc8:	b141      	cbz	r1, 8002cdc <__swsetup_r+0x4c>
 8002cca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002cce:	4299      	cmp	r1, r3
 8002cd0:	d002      	beq.n	8002cd8 <__swsetup_r+0x48>
 8002cd2:	4628      	mov	r0, r5
 8002cd4:	f7ff fa7c 	bl	80021d0 <_free_r>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	6363      	str	r3, [r4, #52]	; 0x34
 8002cdc:	89a3      	ldrh	r3, [r4, #12]
 8002cde:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ce2:	81a3      	strh	r3, [r4, #12]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	6063      	str	r3, [r4, #4]
 8002ce8:	6923      	ldr	r3, [r4, #16]
 8002cea:	6023      	str	r3, [r4, #0]
 8002cec:	89a3      	ldrh	r3, [r4, #12]
 8002cee:	f043 0308 	orr.w	r3, r3, #8
 8002cf2:	81a3      	strh	r3, [r4, #12]
 8002cf4:	6923      	ldr	r3, [r4, #16]
 8002cf6:	b94b      	cbnz	r3, 8002d0c <__swsetup_r+0x7c>
 8002cf8:	89a3      	ldrh	r3, [r4, #12]
 8002cfa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d02:	d003      	beq.n	8002d0c <__swsetup_r+0x7c>
 8002d04:	4621      	mov	r1, r4
 8002d06:	4628      	mov	r0, r5
 8002d08:	f000 f8b4 	bl	8002e74 <__smakebuf_r>
 8002d0c:	89a0      	ldrh	r0, [r4, #12]
 8002d0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d12:	f010 0301 	ands.w	r3, r0, #1
 8002d16:	d00a      	beq.n	8002d2e <__swsetup_r+0x9e>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60a3      	str	r3, [r4, #8]
 8002d1c:	6963      	ldr	r3, [r4, #20]
 8002d1e:	425b      	negs	r3, r3
 8002d20:	61a3      	str	r3, [r4, #24]
 8002d22:	6923      	ldr	r3, [r4, #16]
 8002d24:	b943      	cbnz	r3, 8002d38 <__swsetup_r+0xa8>
 8002d26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002d2a:	d1c4      	bne.n	8002cb6 <__swsetup_r+0x26>
 8002d2c:	bd38      	pop	{r3, r4, r5, pc}
 8002d2e:	0781      	lsls	r1, r0, #30
 8002d30:	bf58      	it	pl
 8002d32:	6963      	ldrpl	r3, [r4, #20]
 8002d34:	60a3      	str	r3, [r4, #8]
 8002d36:	e7f4      	b.n	8002d22 <__swsetup_r+0x92>
 8002d38:	2000      	movs	r0, #0
 8002d3a:	e7f7      	b.n	8002d2c <__swsetup_r+0x9c>
 8002d3c:	20000074 	.word	0x20000074

08002d40 <memmove>:
 8002d40:	4288      	cmp	r0, r1
 8002d42:	b510      	push	{r4, lr}
 8002d44:	eb01 0402 	add.w	r4, r1, r2
 8002d48:	d902      	bls.n	8002d50 <memmove+0x10>
 8002d4a:	4284      	cmp	r4, r0
 8002d4c:	4623      	mov	r3, r4
 8002d4e:	d807      	bhi.n	8002d60 <memmove+0x20>
 8002d50:	1e43      	subs	r3, r0, #1
 8002d52:	42a1      	cmp	r1, r4
 8002d54:	d008      	beq.n	8002d68 <memmove+0x28>
 8002d56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d5e:	e7f8      	b.n	8002d52 <memmove+0x12>
 8002d60:	4601      	mov	r1, r0
 8002d62:	4402      	add	r2, r0
 8002d64:	428a      	cmp	r2, r1
 8002d66:	d100      	bne.n	8002d6a <memmove+0x2a>
 8002d68:	bd10      	pop	{r4, pc}
 8002d6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d72:	e7f7      	b.n	8002d64 <memmove+0x24>

08002d74 <_sbrk_r>:
 8002d74:	b538      	push	{r3, r4, r5, lr}
 8002d76:	2300      	movs	r3, #0
 8002d78:	4d05      	ldr	r5, [pc, #20]	; (8002d90 <_sbrk_r+0x1c>)
 8002d7a:	4604      	mov	r4, r0
 8002d7c:	4608      	mov	r0, r1
 8002d7e:	602b      	str	r3, [r5, #0]
 8002d80:	f7fd fb7c 	bl	800047c <_sbrk>
 8002d84:	1c43      	adds	r3, r0, #1
 8002d86:	d102      	bne.n	8002d8e <_sbrk_r+0x1a>
 8002d88:	682b      	ldr	r3, [r5, #0]
 8002d8a:	b103      	cbz	r3, 8002d8e <_sbrk_r+0x1a>
 8002d8c:	6023      	str	r3, [r4, #0]
 8002d8e:	bd38      	pop	{r3, r4, r5, pc}
 8002d90:	20000314 	.word	0x20000314

08002d94 <memchr>:
 8002d94:	4603      	mov	r3, r0
 8002d96:	b510      	push	{r4, lr}
 8002d98:	b2c9      	uxtb	r1, r1
 8002d9a:	4402      	add	r2, r0
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	d101      	bne.n	8002da6 <memchr+0x12>
 8002da2:	2000      	movs	r0, #0
 8002da4:	e003      	b.n	8002dae <memchr+0x1a>
 8002da6:	7804      	ldrb	r4, [r0, #0]
 8002da8:	3301      	adds	r3, #1
 8002daa:	428c      	cmp	r4, r1
 8002dac:	d1f6      	bne.n	8002d9c <memchr+0x8>
 8002dae:	bd10      	pop	{r4, pc}

08002db0 <memcpy>:
 8002db0:	440a      	add	r2, r1
 8002db2:	4291      	cmp	r1, r2
 8002db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002db8:	d100      	bne.n	8002dbc <memcpy+0xc>
 8002dba:	4770      	bx	lr
 8002dbc:	b510      	push	{r4, lr}
 8002dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dc2:	4291      	cmp	r1, r2
 8002dc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002dc8:	d1f9      	bne.n	8002dbe <memcpy+0xe>
 8002dca:	bd10      	pop	{r4, pc}

08002dcc <_realloc_r>:
 8002dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dd0:	4680      	mov	r8, r0
 8002dd2:	4614      	mov	r4, r2
 8002dd4:	460e      	mov	r6, r1
 8002dd6:	b921      	cbnz	r1, 8002de2 <_realloc_r+0x16>
 8002dd8:	4611      	mov	r1, r2
 8002dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dde:	f7ff ba5f 	b.w	80022a0 <_malloc_r>
 8002de2:	b92a      	cbnz	r2, 8002df0 <_realloc_r+0x24>
 8002de4:	f7ff f9f4 	bl	80021d0 <_free_r>
 8002de8:	4625      	mov	r5, r4
 8002dea:	4628      	mov	r0, r5
 8002dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002df0:	f000 f89e 	bl	8002f30 <_malloc_usable_size_r>
 8002df4:	4284      	cmp	r4, r0
 8002df6:	4607      	mov	r7, r0
 8002df8:	d802      	bhi.n	8002e00 <_realloc_r+0x34>
 8002dfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002dfe:	d812      	bhi.n	8002e26 <_realloc_r+0x5a>
 8002e00:	4621      	mov	r1, r4
 8002e02:	4640      	mov	r0, r8
 8002e04:	f7ff fa4c 	bl	80022a0 <_malloc_r>
 8002e08:	4605      	mov	r5, r0
 8002e0a:	2800      	cmp	r0, #0
 8002e0c:	d0ed      	beq.n	8002dea <_realloc_r+0x1e>
 8002e0e:	42bc      	cmp	r4, r7
 8002e10:	4622      	mov	r2, r4
 8002e12:	4631      	mov	r1, r6
 8002e14:	bf28      	it	cs
 8002e16:	463a      	movcs	r2, r7
 8002e18:	f7ff ffca 	bl	8002db0 <memcpy>
 8002e1c:	4631      	mov	r1, r6
 8002e1e:	4640      	mov	r0, r8
 8002e20:	f7ff f9d6 	bl	80021d0 <_free_r>
 8002e24:	e7e1      	b.n	8002dea <_realloc_r+0x1e>
 8002e26:	4635      	mov	r5, r6
 8002e28:	e7df      	b.n	8002dea <_realloc_r+0x1e>

08002e2a <__swhatbuf_r>:
 8002e2a:	b570      	push	{r4, r5, r6, lr}
 8002e2c:	460c      	mov	r4, r1
 8002e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e32:	4615      	mov	r5, r2
 8002e34:	2900      	cmp	r1, #0
 8002e36:	461e      	mov	r6, r3
 8002e38:	b096      	sub	sp, #88	; 0x58
 8002e3a:	da0c      	bge.n	8002e56 <__swhatbuf_r+0x2c>
 8002e3c:	89a3      	ldrh	r3, [r4, #12]
 8002e3e:	2100      	movs	r1, #0
 8002e40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002e44:	bf0c      	ite	eq
 8002e46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002e4a:	2340      	movne	r3, #64	; 0x40
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	6031      	str	r1, [r6, #0]
 8002e50:	602b      	str	r3, [r5, #0]
 8002e52:	b016      	add	sp, #88	; 0x58
 8002e54:	bd70      	pop	{r4, r5, r6, pc}
 8002e56:	466a      	mov	r2, sp
 8002e58:	f000 f848 	bl	8002eec <_fstat_r>
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	dbed      	blt.n	8002e3c <__swhatbuf_r+0x12>
 8002e60:	9901      	ldr	r1, [sp, #4]
 8002e62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002e66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002e6a:	4259      	negs	r1, r3
 8002e6c:	4159      	adcs	r1, r3
 8002e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e72:	e7eb      	b.n	8002e4c <__swhatbuf_r+0x22>

08002e74 <__smakebuf_r>:
 8002e74:	898b      	ldrh	r3, [r1, #12]
 8002e76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e78:	079d      	lsls	r5, r3, #30
 8002e7a:	4606      	mov	r6, r0
 8002e7c:	460c      	mov	r4, r1
 8002e7e:	d507      	bpl.n	8002e90 <__smakebuf_r+0x1c>
 8002e80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002e84:	6023      	str	r3, [r4, #0]
 8002e86:	6123      	str	r3, [r4, #16]
 8002e88:	2301      	movs	r3, #1
 8002e8a:	6163      	str	r3, [r4, #20]
 8002e8c:	b002      	add	sp, #8
 8002e8e:	bd70      	pop	{r4, r5, r6, pc}
 8002e90:	466a      	mov	r2, sp
 8002e92:	ab01      	add	r3, sp, #4
 8002e94:	f7ff ffc9 	bl	8002e2a <__swhatbuf_r>
 8002e98:	9900      	ldr	r1, [sp, #0]
 8002e9a:	4605      	mov	r5, r0
 8002e9c:	4630      	mov	r0, r6
 8002e9e:	f7ff f9ff 	bl	80022a0 <_malloc_r>
 8002ea2:	b948      	cbnz	r0, 8002eb8 <__smakebuf_r+0x44>
 8002ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ea8:	059a      	lsls	r2, r3, #22
 8002eaa:	d4ef      	bmi.n	8002e8c <__smakebuf_r+0x18>
 8002eac:	f023 0303 	bic.w	r3, r3, #3
 8002eb0:	f043 0302 	orr.w	r3, r3, #2
 8002eb4:	81a3      	strh	r3, [r4, #12]
 8002eb6:	e7e3      	b.n	8002e80 <__smakebuf_r+0xc>
 8002eb8:	89a3      	ldrh	r3, [r4, #12]
 8002eba:	6020      	str	r0, [r4, #0]
 8002ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec0:	81a3      	strh	r3, [r4, #12]
 8002ec2:	9b00      	ldr	r3, [sp, #0]
 8002ec4:	6120      	str	r0, [r4, #16]
 8002ec6:	6163      	str	r3, [r4, #20]
 8002ec8:	9b01      	ldr	r3, [sp, #4]
 8002eca:	b15b      	cbz	r3, 8002ee4 <__smakebuf_r+0x70>
 8002ecc:	4630      	mov	r0, r6
 8002ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ed2:	f000 f81d 	bl	8002f10 <_isatty_r>
 8002ed6:	b128      	cbz	r0, 8002ee4 <__smakebuf_r+0x70>
 8002ed8:	89a3      	ldrh	r3, [r4, #12]
 8002eda:	f023 0303 	bic.w	r3, r3, #3
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	81a3      	strh	r3, [r4, #12]
 8002ee4:	89a3      	ldrh	r3, [r4, #12]
 8002ee6:	431d      	orrs	r5, r3
 8002ee8:	81a5      	strh	r5, [r4, #12]
 8002eea:	e7cf      	b.n	8002e8c <__smakebuf_r+0x18>

08002eec <_fstat_r>:
 8002eec:	b538      	push	{r3, r4, r5, lr}
 8002eee:	2300      	movs	r3, #0
 8002ef0:	4d06      	ldr	r5, [pc, #24]	; (8002f0c <_fstat_r+0x20>)
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	4608      	mov	r0, r1
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	602b      	str	r3, [r5, #0]
 8002efa:	f7fe fd60 	bl	80019be <_fstat>
 8002efe:	1c43      	adds	r3, r0, #1
 8002f00:	d102      	bne.n	8002f08 <_fstat_r+0x1c>
 8002f02:	682b      	ldr	r3, [r5, #0]
 8002f04:	b103      	cbz	r3, 8002f08 <_fstat_r+0x1c>
 8002f06:	6023      	str	r3, [r4, #0]
 8002f08:	bd38      	pop	{r3, r4, r5, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000314 	.word	0x20000314

08002f10 <_isatty_r>:
 8002f10:	b538      	push	{r3, r4, r5, lr}
 8002f12:	2300      	movs	r3, #0
 8002f14:	4d05      	ldr	r5, [pc, #20]	; (8002f2c <_isatty_r+0x1c>)
 8002f16:	4604      	mov	r4, r0
 8002f18:	4608      	mov	r0, r1
 8002f1a:	602b      	str	r3, [r5, #0]
 8002f1c:	f7fe feb6 	bl	8001c8c <_isatty>
 8002f20:	1c43      	adds	r3, r0, #1
 8002f22:	d102      	bne.n	8002f2a <_isatty_r+0x1a>
 8002f24:	682b      	ldr	r3, [r5, #0]
 8002f26:	b103      	cbz	r3, 8002f2a <_isatty_r+0x1a>
 8002f28:	6023      	str	r3, [r4, #0]
 8002f2a:	bd38      	pop	{r3, r4, r5, pc}
 8002f2c:	20000314 	.word	0x20000314

08002f30 <_malloc_usable_size_r>:
 8002f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f34:	1f18      	subs	r0, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	bfbc      	itt	lt
 8002f3a:	580b      	ldrlt	r3, [r1, r0]
 8002f3c:	18c0      	addlt	r0, r0, r3
 8002f3e:	4770      	bx	lr

08002f40 <_init>:
 8002f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f42:	bf00      	nop
 8002f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f46:	bc08      	pop	{r3}
 8002f48:	469e      	mov	lr, r3
 8002f4a:	4770      	bx	lr

08002f4c <_fini>:
 8002f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4e:	bf00      	nop
 8002f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f52:	bc08      	pop	{r3}
 8002f54:	469e      	mov	lr, r3
 8002f56:	4770      	bx	lr
